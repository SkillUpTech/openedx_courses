{"start":[670,4185,8480,10500,13430,15110,17090,22855,25890,27725,30520,32835,37170,39900,41670,44150,46515,47630,51245,56025,58680,60120,64295,65520,67110,71270,73380,76615,79800,83475,86655,88890,92540,95210,97490,100535,102690,105915,107940,109945,112890,116235,117475,119226,123855,128305,131130,134730,139140,143130,148025,150180,154440,157680,160180,162640,165130,168425,170560,173085,175630,177890,179950,183952,187195,192740,196515,200690,203000,206540,209810,212730,215810,219290,222690,226280,232180,235460,237980,240655,243365,247130,250120,251590,256795,261123,264595,266770,269080,271030,272890,275320,277650,280760,282110,284835,288100,290478,293200,296350,298180,300955,305230,306430,308905,311185,314840,316758,320415,322710,324195,326940,330600,333840,337950,339940,342695,346665,352590,354166,358530,362910,366360,367860,369435,373217,378045,379770,383850,387860,389010,390870,394995,396745,398930,402520,405945,411090,413110,417015,420335,423425,426050,429810,431390,435170,441930,445093,448583,451385,453690,455830,459030,461025,463490,465370,468550,472935,475590,479628,482430,485670,493625,494830,497500,498970,501070,504130,508370,510760,512845,515255,517480,520015,524320,527995,531655,534760,538134,539215,541435,545740,549005,551075,554480,555620,558065,560905,565940,569870,571175,574760,577300,579020,581070,583130,587030,588200,590585,596405,599405,601940,604135,606320,609660,611360,613865,615175,617660,619210,622330,625950,630270,631455,634700,636795,639420,640560,642625,646385,648380,650610,653430,657240,662755,665720,667320,669320,671700,675165,679785,683374,686360,688275,690260,691415,692745,695190,698550,702480,704670,706720,709140,711180,714055,716610,720000,722520,725690,727100,732060,736245,738540,739770,741060,744120,748480,752150,754430,757165,759485,762290,764675,768870,770940],"end":[4185,8480,10500,13430,15110,17090,22855,25890,27725,30520,32835,37170,39900,41670,44150,46515,47630,51245,56025,58680,60120,64295,65520,67110,71270,73380,76615,79800,83475,86655,88890,92540,95210,97490,100535,102690,105915,107940,109945,112890,116235,117475,119226,123855,128305,131130,134730,139140,143130,148025,150180,154440,157680,160180,162640,165130,168425,170560,173085,175630,177890,179950,183952,187195,192740,196515,200690,203000,206540,209810,212730,215810,219290,222690,226280,232180,235460,237980,240655,243365,247130,250120,251590,256795,261123,264595,266770,269080,271030,272890,275320,277650,280760,282110,284835,288100,290478,293200,296350,298180,300955,305230,306430,308905,311185,314840,316758,320415,322710,324195,326940,330600,333840,337950,339940,342695,346665,352590,354166,358530,362910,366360,367860,369435,373217,378045,379770,383850,387860,389010,390870,394995,396745,398930,402520,405945,411090,413110,417015,420335,423425,426050,429810,431390,435170,441930,445093,448583,451385,453690,455830,459030,461025,463490,465370,468550,472935,475590,479628,482430,485670,493625,494830,497500,498970,501070,504130,508370,510760,512845,515255,517480,520015,524320,527995,531655,534760,538134,539215,541435,545740,549005,551075,554480,555620,558065,560905,565940,569870,571175,574760,577300,579020,581070,583130,587030,588200,590585,596405,599405,601940,604135,606320,609660,611360,613865,615175,617660,619210,622330,625950,630270,631455,634700,636795,639420,640560,642625,646385,648380,650610,653430,657240,662755,665720,667320,669320,671700,675165,679785,683374,686360,688275,690260,691415,692745,695190,698550,702480,704670,706720,709140,711180,714055,716610,720000,722520,725690,727100,732060,736245,738540,739770,741060,744120,748480,752150,754430,757165,759485,762290,764675,768870,770940,774000],"text":["In this video, let's take a deeper look at","Azure Cosmos DB's SQL query API in which","we'll take a look at some of the knobs and","levers you have for tuning query performance,","as well as some of the other just","general information you'll want to know as","you get deeper into Cosmos DB SQL query API.","And for the purposes of this video,","what we'll do is we'll do a walkthrough of","a sample that we have published on our GitHub.","So if you'd like to follow along,","you can find our GitHub repository","which is azure-documentdb-dotnet.","And then within that, we're going to have","a large number of samples for you,","and for this video specifically,","you're going to want to go into","the samples directory under code-samples/Queries.","Take a look at the Program.cs file.","So, in the previous video,","we went over some of","the basic structures of a Azure Cosmos DB query.","So now let's take a look at","the programmability interface to","the SDK on how you can actually issue those queries.","And for this example,","we're going to use the.NET SDK.","However, the programmability model","for our other SDK is whether that's Java, Node.js,","or Python, is very similar as well,","with a few exceptions for example,","like LINQ, since this is a.NET Concept.","Now, for the Cosmos DB.NET SDK,","it actually supports multiple ways of issuing","queries including reading LINQ Queries,","reading LINQ Lambda functions,","as well as issuing raw SQL queries.","And if you ever want to actually take","a look at what's central for the wire,","every time when you send a query,","it's actually going to be using the SQL grammar.","This is what shipped over the wire,","so for your LINQ queries,","you can actually take the query object and do a.toString,","and you can actually see the SQL query that it generates.","In addition to writing","LINQ queries and SQL queries, for SQL queries,","we also support the parameterization of","the values that you are going to input","into the predicate for your SQL WHERE clause.","And so to parameterize","a set of values to pass in for your WHERE clause,","what you can do is you can create a SQL query spec,","and here what we're","going to do is we're going to parameterize","the ID value in the WHERE clause to","avoid any kind of SQL injection attack.","Basically, the SDK will take care of","all of the sanitization of these strings.","And for the first parameter,","we're going to have the actual query text.","And then for the second parameter,","we're going to have a set of parameterized values,","and so what we'll do is we'll replace the act ID","with an ID value.","So as you get deeper into the query API,","let's take a jump further in,","and there's going to be two ways of","materializing the query results.","And basically, you can call it To List on","the query that is built","to materialize an entire set of query results,","or you can paginate the queries.","And for most scenarios,","it's actually best practice to take a look at","the individual pages of query results and paginate them.","Basically, what happens behind the scenes for Cosmos DB","is the query results will always","be returned in a paginated format.","And when he call.ToList on the query,","what I'll do is it'll walk through all of those pages,","build a list and return that list to you.","And the reason why Cosmos DB","paginates query results is the following.","If you've ever used a database system before,","you run a query and it just seems to take forever,","and you weren't sure like","it's been running for the past couple of minutes,","and you aren't sure whether it's going to take minutes,","or it's going to take hours.","And so, you're not even","sure if you want to just cancel the query,","or just kind of bear with it.","For Azure Cosmos DB,","we operate on a principle of we","will guarantee a response within five seconds,","so that you can get some immediate feedback,","and so if you have a very large set","of query results being returned from the query API,","what we do is we'll break it up into","some bite sized chunks into pages,","and then return you the query results one page at a time,","so that you can also stream","the results and start working off of it,","rather than having to wait forever","for the full query results to be materialized.","Now, how that looks like in","the programmability surface is when you create a query,","you can either call ToList, as I mentioned,","to just have the SDK","automatically materialize that full query results,","or the preferred option is actually,","you can use the HasMoreResults to actually take","a look whether a query has more results,","whether you've reached the final page,","and then you can call ExecuteNextAsync","to retrieve each individual page of results coming back.","Now, by default, Cosmos DB will actually guard you,","it will safeguard you from","accidentally performing a index scan,","or a cross partition query by accidents.","And so for the query API,","what happens is there's actually","a FeedOptions where you can","supply a number of different input parameters,","and this will help tune both the query itself,","as well as acknowledge,","so that if you intentionally want to scan a collection,","or issue a cross partition query,","what you're going to do is you're going to","explicitly acknowledge it by setting","a value through in the FeedOptions.","There's also a few other options","for tuning including the MaxItemCount.","So as Cosmos DB paginates query results,","you can actually define a max page size,","so that you have some knobs and levers at tune","at what rate do you want these results","to come back in for these pages.","A few of the other things that you want to be aware of","is the way Cosmos DB keeps track","of the query results between","pages is in the form of a continuation token.","And so for every response","coming back in the FeedResponse,","there's also a continuation token within that response.","That's basically as a pointer in the index,","so that as well as some other state for information,","so that when you retrieve the next page of results,","the query engine on Cosmos DB","can be very frugal on resources.","It doesn't have to maintain that or persist that state.","What you're doing is you'll be","passing all of the state and needs back","in a follow up request to","return the next page of results.","And so, as you return each individual page,","you can pull out the response,","the continuation value, as well as in the feed options,","you can override and supply in a what is","the continuation token to retrieve the next result.","By default, the SDK will take care of this for you.","So, if you keep doing","HasMoreResults and keep doing ExecuteNext,","you don't actually have to","deal with the continuation token.","However, let's say you have","a large number of stateless application instances,","and what you're doing is you have","a downstream consumer that is","asking you for a page of results,","and each time they issue requests,","it gets routed to a different application instance.","If you want to keep track and allow","the downstream consumer to","paginate over a set of query pages,","what you can do is you can pass this continuation","token back down to your downstream consumer,","and then override","the request continuation in the feed options","for resuming that query.","In addition to tuning these knobs,","you can also tune the knob for","cross partition queries and specifically,","the two things you want to pay","attention is the MaxDegreeOfParallelism,","as well as the MaxBufferedItemCount.","And what this does is to help fill in the context,","Cosmos DB is a partitioned database,","meaning it scales out","horizontally across a large number of partitions.","And if you were to run a query","that can be efficiently routed","to an individual partition.","So let's say we have a container","whose partition key is device ID.","Now, if I run a query that is","something akin to select star","from this container where device ID is 123,","Cosmos DB can actually efficiently","just route that query to a single partition,","where device ID 123,","that data has been","persisted and immediately returned those results.","However, if you want to run","a query that looks across a large number of partitions,","or you run a query that","doesn't contain the partition key,","what will happen is you'll need to find out","and look across several partitions.","Now, by default what happened is the SDK will issue","requests to various partitions sequentially.","However, if you would like","Cosmos DB to speed up the query,","and ask for the data","from a large number of partitions and parallel,","what you can do is you can","tune the MaxDegreeOfParallelism for","the SDK to start executing that query in parallel.","And what it'll do is in parallel,","it'll start requesting this data from","a large number of partitions and it'll prefetch that data","into a buffer to be then","materialized and return to the downstream caller.","And where this buffer becomes very useful","is for things like if you want to","do a cross partition order by.","So imagine if I want to look across","a large number of underlying partitions,","and I want to actually order my query results,","what happens is I might have records one, two,","three on the first partition, records four, five,","six on the next partition,","eight on partition number three,","nine on partition one,","10 on partition two.","Basically, the records might be","scattered and when you look within a partition,","that partition itself can tell you the order of results,","or it can order the records","within that partition when it returns it.","However, when you look across partitions, basically,","what you're doing is you're doing something","that looks very much like a merge sort.","And if doing this merge sort requires","doing a follow up network calls,","what happens is this may return the","time it takes to materialize that query.","So by prefetching this,","rather than having to do a network request as","you come across each record","and having to do follow up network requests,","what you can do is you can actually do this","and prefetch this ahead of time,","so that the query itself is very performant and you","materialize the query results as fast as possible.","So this includes a rundown of","the knobs and levers you have available","for tuning Azure Cosmos DB queries.","For more information,","please do take a look at our documentation,","as well as we have a lot of","great samples in this GitHub sample.","I highly encourage you to download it","and run through it. Thank you."]}