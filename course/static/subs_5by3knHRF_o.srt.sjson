{"start":[0,3365,7520,11065,14440,18535,23420,28093,32130,34030,37375,39305,42880,46920,49550,52050,54610,59745,62515,64930,67240,68470,70870,73401,75370,82585,85405,88767,91290,94245,96650,99290,103255,107360,110265,113110,115970,118146,120950,123250,126885,128115,130384,132120,136270,139515,142365,145643,149460,149940,152820,155090,157560,158970,161270,162600,164670,165595,168535,171145,174660,177030,179535,183650,187855,190920,195605,198245,200350,202970,205270,209585,212960,215196,217805,221505,225405,228330,232170,234150,235650,237925,239800,241510,244210,246780,248745,252210,254415,255715,257495,259295,262530,264480,266345,269334,271920,273210,275670,279090,280790,283615,286164,289155,291715,293490,295290,297000,299207,301785,303325,305020,305970,307450,309300,313955,316450,317720,319330,324035,325900,328190,332905,334755,336400,338725,342130,345845,349205,351860,355220,356840,359400,361935,363290,365685,368810,372615,375470,379155,380600,383270,384825,389090,392150,394500,395660,396860,399865,403385,406080,409490,412350,415800,418110,421630,423960,427155,429230],"end":[3365,7520,11065,14440,18535,23420,28093,32130,34030,37375,39305,42880,46920,49550,52050,54610,59745,62515,64930,67240,68470,70870,73401,75370,82585,85405,88767,91290,94245,96650,99290,103255,107360,110265,113110,115970,118146,120950,123250,126885,128115,130384,132120,136270,139515,142365,145643,149460,149940,152820,155090,157560,158970,161270,162600,164670,165595,168535,171145,174660,177030,179535,183650,187855,190920,195605,198245,200350,202970,205270,209585,212960,215196,217805,221505,225405,228330,232170,234150,235650,237925,239800,241510,244210,246780,248745,252210,254415,255715,257495,259295,262530,264480,266345,269334,271920,273210,275670,279090,280790,283615,286164,289155,291715,293490,295290,297000,299207,301785,303325,305020,305970,307450,309300,313955,316450,317720,319330,324035,325900,328190,332905,334755,336400,338725,342130,345845,349205,351860,355220,356840,359400,361935,363290,365685,368810,372615,375470,379155,380600,383270,384825,389090,392150,394500,395660,396860,399865,403385,406080,409490,412350,415800,418110,421630,423960,427155,429230,431980],"text":["In this video, we look at how to index and query data","using the table API for Azure Cosmos DB.","I have created an account and within that account,","I have created a single table called, people.","Now this account is configured in the West U.S. region.","So let's go to the data explorer and explore the items.","Under people, so I have no data currently available,","so let me insert an item that I can use for query.","Now, since it's people data,","let's use the last name as the partition key,","and the first name as a row key.","The table API, the combination of partition key and","row-key is the primary key for any item within a table.","And in here of course,","we pick the last name as the partition key,","and the first name as the row-key.","So let's add some more properties to this person.","So for John Smith, let's add age property,","and of type, integer.","So you'll notice that","the type system available on","the table API matches that of all data.","So you have the EDM type string, boolean,","datetime, double as well as the two integers and guid.","You can add the property code City,","insert it to Seattle and click save.","So we have this one item within the table,","now we can start running queries against it.","Now the most common kind of query in","the table API is a query","that uses both partition key and row key.","So let's look for the item that we just inserted,","so it's a partition key, then row key.","It's John, click execute, we find the item.","Now this is the most common kind of","query because it's very efficient,","and it can be served from a single partition","with low latency because it's a primary key lookup.","But you don't have to always","use the combination of partition key and row key.","For example, you can find","all the people with the last name Smith,","and this is also an efficient query","because it uses the partition key fulfill trick.","You can add additional filters like for example,","I want to find all of the people","in the table who have last name of Smith,","but are eligible to vote, so they are the ages of 18.","And you can run this query and get","the results back because","Azure Cosmos DB indexes","all properties within your items","that you can run these queries","efficiently using the index.","Now you don't even","have to have a filter on partition key.","So you could run","a query like age greater than or equals 18 to find","all of the people who are eligible to vote.","And that would still run against the index within","each partition in Azure Cosmos DB and","be executed efficiently.","So within the data explorer,","we looked at how you can chain together filter classes.","You can also build more complicated clauses by grouping","statements together with combinations of \"and\"s and \"or\"s.","You can also from advance options,","set the maximum number of results,","as well as set the columns","that you want to project out of the query.","So this was through the Azure Data Explorer,","but you can do the exact same thing programmatically.","To start working with Azure Cosmos DB,","you can use any application that's been","written with the Azure table storage service.","What you have to do is, when you are compiling it,","use the premium table nuget package","instead of the regular Azure storage nuget package,","and you'll be able to connect to either","the table storage services","as well as Azure Cosmos DB.","When you get to the program,","querying works pretty much the","same way as an Azure table storage.","Let's redo what we did through the portal.","We have an Azure storage account,","and within that we have a table client, we have a table.","So you get a reference of the table,","we insert an entity,","here again we insert John Smith,","this is programmatically.","We insert that entity using table operation.","In terms of how you can read the data back,","you could use the get operations.","This is the combination of partition key and row key,","but you can also run all data queries.","So in this case you can","pass the all data expression that says,","this property equals this value,","and you can chain them together with \"and\"s and","\"or\"s using the all data query syntax.","But you don't have to use raw all data queries,","you can use the table query builder clauses","to build them programmatically.","You can also use link,","which is a nice way of","getting compiler support as well as","the ability to get","compiled and checks on data types and so on.","So you can get an IQuery build","back and then rate through results.","And of course you can build","more complicated link queries.","So in this case we have \"and\"s,","and we are projecting just a bio for John Smith,","or from the same thing that we did a little bit","earlier where our query are","not just partition key and row key,","but by a property called email.","This is pretty much all you","need to know to get started with querying.","Let's take a quick look at indexing.","Let's get back to the portal.","If you look at every table that","has a setting called indexing policy.","This determines how our Azure Cosmos GP","will index new items as they show up.","There are configuration settings like indexing mode,","which let's you configure whether indexing must be","performed in a consistent manner or in a lazy manner,","which means that indexing will be","performed asynchronously in the background.","You can set automatic indexing to true or false,","which lets you control which","items that are indexed and which ones are not.","And you can also configure which parts or","properties are indexed and for which data types.","For example, here we used the default policy which","means all properties are indexed for all types.","But you can index","certain properties or index certain types depending on","your use case and trade-off","between index storage overhead and performance.","So in this case I could for example,","indexing to lazy or","none if I have a key","a key value workload, I could just set this to none.","And all I have to do is click save and","this is applied to all the items within my table,","or you can also do this programmatically.","Now in App.Config,","the special key called table indexing policy","is applied on creation with every new table.","Now assume you can set this to configure how","your tables are created with Azure Cosmos DB as well.","So in this video we took a look at how to","index and query data using the Azure table API.","You can find more information online","in the Cosmos DB documentation."]}