{"start":[450,3520,6130,8285,11450,13990,17290,20045,24375,27040,29230,31150,32980,36655,39340,41245,47760,51380,54440,56000,59150,62210,65960,68800,70220,71450,74510,76790,79560,83270,84920,86120,88370,90575,92630,94460,96485,99890,101690,102945,105785,109460,113405,115310,119020,121754,124220,126410,128690,130040,131690,134000,136340,139220,141301,144875,148910,153480,156590,158325,160215,162620,166430,168050,170510,173150,176920,179410,184610,187790,193675,197955,200790,203070,207100,209430,212955,215160,219060,220545,222975,224640,226920,229230,231355,235110,236460,242735,245760,249870,252030,254190,256905,260655,262320,264300,266130,268425,272906,274160,279080,281930,286365,288370,290705,292385,294410,298155,301415,302495,304085,306184,310400,312440,315260,316970,319445,321440,324594,329165,332090,337035,338940,342225,344040,346455,349731,353535,355260,357210,361640,363560,366635,369230,372905,375275,377882,380570,384935,388695,390870,393710,395040,397905,400160,402960,405720,407820,410145,415255,418140,422045,424090,426880,430282,431920,433990,436450,438100,441670,446835,448060,450430,452930,454345,457850,460830],"end":[3520,6130,8285,11450,13990,17290,20045,24375,27040,29230,31150,32980,36655,39340,41245,47760,51380,54440,56000,59150,62210,65960,68800,70220,71450,74510,76790,79560,83270,84920,86120,88370,90575,92630,94460,96485,99890,101690,102945,105785,109460,113405,115310,119020,121754,124220,126410,128690,130040,131690,134000,136340,139220,141301,144875,148910,153480,156590,158325,160215,162620,166430,168050,170510,173150,176920,179410,184610,187790,193675,197955,200790,203070,207100,209430,212955,215160,219060,220545,222975,224640,226920,229230,231355,235110,236460,242735,245760,249870,252030,254190,256905,260655,262320,264300,266130,268425,272906,274160,279080,281930,286365,288370,290705,292385,294410,298155,301415,302495,304085,306184,310400,312440,315260,316970,319445,321440,324594,329165,332090,337035,338940,342225,344040,346455,349731,353535,355260,357210,361640,363560,366635,369230,372905,375275,377882,380570,384935,388695,390870,393710,395040,397905,400160,402960,405720,407820,410145,415255,418140,422045,424090,426880,430282,431920,433990,436450,438100,441670,446835,448060,450430,452930,454345,457850,460830,465000],"text":[">> The Azure Cosmos DB Change Feed","provides a persistent log of records within","an Azure Cosmos DB container in","the order which the records were modified.","In other words, the Change Feed is your mechanism","for getting a continuous and incremental feed of","records from the Cosmos DB container","as those records are being actively written or modified.","This is useful in the context","of a variety of different scenarios.","And a few of the common scenarios","that we have observed include,","triggering API calls for an event driven architecture,","performing real-time stream processing","to build materialized views,","and moving or archiving data to secondary data stores.","In the first scenario which is triggering","API calls for event driven architectures.","Basically, what you're doing here is you're","sourcing events to a set of microservices.","A common example of this scenario is","a large scale e-commerce order processing pipelines,","and a large scale e-commerce website.","Typically, the order processing","pipeline needs to be broken up","into a set smaller microservices.","So that each of these different microservices","can be scaled out independently.","Examples of these microservices could be,","as orders come in,","you want to calculate","the tax and generate tax audit records,","process each of these orders for payment,","and send these orders off to","a fulfillment center where","they'll be boxed up and shipped out,","and then generating a shipping notification.","And this kind of scenario,","rather than having","N different microservices communicating to","N - 1 other microservices which adds a great deal","of complexity to the larger architecture.","What you want to do is you want all of","these microservices communicating through a bus,","that is a Persistent Event Store.","Cosmos DB is an","awesome Persistent Event Store because not","only do you have a change feed for brokering and","sourcing these events to each","of these different microservices,","but the events themselves are persisted.","So that the order processing pipeline","is incredibly robust and resilient to failures.","And you can also query","the individual events and navigate through them,","in order to service this data back out through a set","of customer care APIs.","Your Change Feed can also be used for performing","real-time shrink processing and","materializing a set of views.","In the context of the previous scenario,","this can be used for doing something like taking all","of the events and materializing","a single viewer for tracking the order status.","So that you can then present the order status and","a user facing API.","Additional examples could be,","doing real-time analytics on an IoT telemetry use case,","or building a scoring leaderboard,","or a massively multiplayer online video game.","A third and very common scenario for","using the Cosmos DB Change Feed is","replicating data from Cosmos DB as","your primary store to another secondary data store.","Cosmos DB is a fantastic hot store","because it can support a sustained heavy write ingestion.","And immediately serve out","the ingested records back out to a user facing API.","However, as time goes on,","and these heavy write scenarios,","the data can pile up.","And what you may want to do is","offload set of that data","beyond a certain retention interval,","off to a secondary data store for archival.","And the Change Feed is","a wonderful mechanism facilitating this replication.","So, how do we actually work with the Change Feed?","And an important thing to remember is Azure Cosmos DB is","a scale-out database in which each of","the Cosmos DB containers","has a set of resource partitions.","And basically, as records are written into the container,","and distributed across each of","these different resource partitions.","What you want to do is have a consumer","reading a change feed from each","of these resource partitions.","This is accomplished by","calling the ReadPartitionKeyRangeFeedAsync API","in which a feed of","PartitionKeyRanges will be fed back in the response.","And what you want to do is collect all","of the PartitionKeyRangers into a list.","So that in step two,","you can then start consuming that Change Feed","on each of these different PartitionsKeyRanges.","And you can do this in a variety of different ways.","And the code that's here,","what we have done is we're going to","just iterate through each of these PartitionKeyRanges.","And a more robust scenario,","what you might want to do is spawn off","a bunch of tasks that run in parallel for","each of these PartitionKeyRanges","in which the task within will","then consume the Change Feed by","calling the CreateDocumentChangeFeedQuery API.","And then, once the ChangeFeedQuery has been constructed,","what you'll do is you're continuously get a feed of","those results by calling ExecuteNextAsync.","Now, in order to","simplify reading the Change Feed from","all of these different partitions,","Cosmos DB has also created","a Change Feed Processor Library in","which tracking all of the different partitions,","and acquiring leases,","so that you can scale out a large number of","consumers is all automatically done for you.","And the way this works","is the Change Fee Processor Library","will persist a set of leases","in another Cosmos DB container.","And this way, As you spin up","additional host or additional consumers,","they will greedily try to acquire leases as they","expire on the Cosmos DB container.","To show you how easy this API is.","The only thing you really need to do","is the following two steps.","First, what you're going to do is","implement an interface for","a ChangeFeedObserver in which there","is a single method called, ProcessChangesAsync.","And within this method, basically,","this is going to be your business logic","as you see records coming out of the Change Feed.","And any time new records are inserted into the container,","the ChangeFeedObserver will automatically","call this ProcessChangesAsync method.","Once you've been at that interface,","all you need to do now is register that","ChangeFeedObserver to a ChangeFeedEventHost.","So, what you all do is.","Here what we've done is we've implemented","the IChangeFeedObserver into a new class called,","DocumentFeedObserver.","We instantiate a new ChangeFeedEventHost where we'll get","the connection info for the source container.","We will also give","a location for where","to store the leases and process those.","And then from there, we just","register our observer and then we're done.","This concludes our video on","the Azure Cosmos DB Change Feed. Thank you for watching."]}