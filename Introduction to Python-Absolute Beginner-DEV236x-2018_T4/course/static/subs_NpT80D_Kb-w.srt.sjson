{
  "start": [
    4201, 
    8611, 
    11546, 
    14671, 
    17863, 
    21148, 
    26910, 
    29543, 
    31901, 
    39790, 
    44022, 
    47440, 
    51798, 
    56913, 
    59921, 
    64406, 
    69483, 
    72644, 
    77248, 
    82275, 
    84418, 
    91687, 
    95504, 
    100531, 
    104111, 
    106600, 
    110466, 
    116841, 
    126392, 
    130820
  ], 
  "end": [
    8610, 
    11545, 
    14670, 
    17862, 
    21147, 
    24975, 
    29542, 
    31900, 
    37741, 
    44021, 
    47439, 
    51797, 
    54610, 
    57456, 
    64405, 
    69482, 
    72643, 
    77247, 
    78450, 
    84417, 
    89732, 
    95503, 
    100530, 
    104110, 
    104780, 
    110465, 
    116840, 
    122242, 
    130819, 
    132580
  ], 
  "text": [
    "While loops can be controlled with Boolean comparison operators so", 
    "that we can stop the loop when a match is made or", 
    "a number goes over a certain value.", 
    "Let's review our comparison operator so we can use them in a while loop.", 
    "We have < and >.", 
    "We have >= and <=.", 
    "==, !=.", 
    "In our first example,", 
    "we'll run a while loop while a value is greater than 0.", 
    "We start with a greet_count = 5 and it will print out that number.", 
    "Then it will decrement that by one.", 
    "So it will decrease it by one each time it runs through the loop,", 
    "until it is no longer greater than zero.", 
    "Let's run the code.", 
    "So we see it started with 5 and prints all the way til one.", 
    "When it gets to 1, then we see that one minus one will be 0,", 
    "and it's no longer greater than 0.", 
    "And the loop exits to this point outside of the indentation, and", 
    "runs ignition.", 
    "In our final example,", 
    "we run a while loop checking if the seat_count <= 4.", 
    "Here, we see that there's a print statement and", 
    "an increment of the seat_count value as we go through the loop,", 
    "starting with the seat_count to find at 0.", 
    "Let's run the code.", 
    "Here we see the increment running and", 
    "this comparison operator, when it hits 4, the loop ends.", 
    "Code ends up outside of the indentation and that is the code.", 
    "We can control the looping of a while statement by using Boolean", 
    "comparison operators."
  ]
}