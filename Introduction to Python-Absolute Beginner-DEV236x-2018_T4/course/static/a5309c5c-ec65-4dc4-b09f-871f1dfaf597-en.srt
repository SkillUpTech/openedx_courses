0
00:00:00,260 --> 00:00:03,688
Hi and welcome to the lab for module two

1
00:00:03,711 --> 00:00:05,955
on Logistic Regression with MNIST data.

2
00:00:06,022 --> 00:00:10,422
This lab is divided into two notebooks 103A,

3
00:00:10,488 --> 00:00:12,800
which does the data download

4
00:00:12,911 --> 00:00:16,660
and writing to a local file, and 103B

5
00:00:16,688 --> 00:00:19,977
which actually builds the Logistic Regression model.

6
00:00:20,044 --> 00:00:23,088
So, we'll start with 103A.

7
00:00:25,044 --> 00:00:28,088
Now for both these notebooks since

8
00:00:28,155 --> 00:00:31,520
the first notebook for the course

9
00:00:31,644 --> 00:00:33,770
I'm going to go through each line of code,

10
00:00:33,955 --> 00:00:35,940
just so we can try and understand

11
00:00:36,111 --> 00:00:39,880
and everything we see and subsequent labs will go much faster.

12
00:00:40,200 --> 00:00:45,600
So, this first section here is bringing in the libraries we need,

13
00:00:45,755 --> 00:00:49,866
there's matplotlib, numpy, os, sys,

14
00:00:49,933 --> 00:00:54,288
and then here we do a little try except

15
00:00:54,333 --> 00:00:57,755
to try and find the URL live in

16
00:00:57,822 --> 00:01:01,688
one of two places and that's just because there are different versions of it

17
00:01:01,733 --> 00:01:04,533
and then this line right here

18
00:01:04,577 --> 00:01:07,400
with % is a directive to

19
00:01:07,440 --> 00:01:11,888
the Python notebook same for the matplotlib plots

20
00:01:11,933 --> 00:01:15,460
that we create, make them inline in the output pane

21
00:01:15,533 --> 00:01:17,133
as opposed to a floating window

22
00:01:17,200 --> 00:01:20,422
that make much easier for us to manage.

23
00:01:20,488 --> 00:01:25,066
OK, the first thing we're going to do is the data download

24
00:01:25,111 --> 00:01:29,933
and for that we have three functions to find here. Load data,

25
00:01:30,044 --> 00:01:33,400
load labels and then a try download

26
00:01:33,510 --> 00:01:38,977
that calls both of them. So let's walk through and see what these are doing.

27
00:01:40,333 --> 00:01:44,950
The load data starts with printing, downloading

28
00:01:45,022 --> 00:01:49,977
and SRC which is the URL of he file we want to download.

29
00:01:50,088 --> 00:01:54,888
Then we use this library routine called URL retrieve

30
00:01:54,955 --> 00:01:59,088
to do the actual download from the SRC source file

31
00:01:59,155 --> 00:02:02,000
and we put it in a local file called delete me

32
00:02:02,088 --> 00:02:04,444
so we can remember to delete it if

33
00:02:04,511 --> 00:02:06,666
we see it laying around later.

34
00:02:06,733 --> 00:02:10,155
Once that download is finished, we print done

35
00:02:10,244 --> 00:02:12,800
and then we enter this try-finally block

36
00:02:12,840 --> 00:02:17,244
inside here. The first thing we do is we open the file with

37
00:02:17,288 --> 00:02:20,130
gzip because it's a zip file,

38
00:02:20,220 --> 00:02:25,311
we use a gzfname which is the file name that was created

39
00:02:25,333 --> 00:02:29,288
when we created this delete me file

40
00:02:29,355 --> 00:02:32,844
and we're going to refer to that object is gz.

41
00:02:32,911 --> 00:02:35,555
The next thing we do is,

42
00:02:35,577 --> 00:02:41,711
we unpack 4 bytes as gz read of 4 give us first 4 bytes of the file

43
00:02:41,733 --> 00:02:46,044
and we convert that to an integer and we start with 'n'.

44
00:02:46,088 --> 00:02:49,911
This is read magic number. So we're going to check

45
00:02:49,911 --> 00:02:52,511
if the first element 'n'

46
00:02:52,550 --> 00:02:54,800
if it's not equal to this magic number,

47
00:02:54,880 --> 00:02:57,911
four zip files, then we're going to raise an exception saying

48
00:02:57,977 --> 00:03:00,511
this is not available to zip file.

49
00:03:00,533 --> 00:03:05,066
The Next step, we're going to read

50
00:03:05,130 --> 00:03:09,422
and the number of entries that were specified up here as cimg

51
00:03:09,466 --> 00:03:11,466
which is the count of images

52
00:03:11,555 --> 00:03:19,830
and so we read the next 4 bytes

53
00:03:19,955 --> 00:03:26,370
as a big Indian, pipe order is called big Indian in this case

54
00:03:26,422 --> 00:03:29,488
into 'n' again and if they're not equal,

55
00:03:29,511 --> 00:03:34,577
then something is wrong and we print out another exception error.

56
00:03:34,644 --> 00:03:38,244
Otherwise, we read the next 4 bytes

57
00:03:38,266 --> 00:03:41,222
into crow which is a count of  rows

58
00:03:41,266 --> 00:03:45,866
and the next 4 bytes into ccol which is our count of columns.

59
00:03:45,911 --> 00:03:51,755
And for this files we understand that those should both be 28.

60
00:03:51,955 --> 00:03:56,480
So we say you know if either one is not 28 that we raise another exception.

61
00:03:56,577 --> 00:03:59,060
If we pass all those  tests,

62
00:03:59,222 --> 00:04:01,220
then we can actually read the data

63
00:04:01,333 --> 00:04:06,930
and so here we have a gz read and the number of bytes to read is going to be

64
00:04:07,022 --> 00:04:10,950
the number of images, times the number of rows, times of number of columns.

65
00:04:10,977 --> 00:04:16,177
So we're going to get all the image data out in a very long array

66
00:04:16,222 --> 00:04:20,133
and we'll store that in res, our result

67
00:04:20,200 --> 00:04:24,888
and then finally we will remove the delete me

68
00:04:24,911 --> 00:04:28,200
file that we created here and right now

69
00:04:28,266 --> 00:04:32,488
all our member, all our data is in this res array

70
00:04:32,577 --> 00:04:36,333
and the last thing we do before returning is we reshape it

71
00:04:36,370 --> 00:04:42,066
such that it's a collection of

72
00:04:42,155 --> 00:04:47,133
cm rows which in our case will be 60,000

73
00:04:47,200 --> 00:04:51,170
and then times an array which is 28 by 28.

74
00:04:51,288 --> 00:04:57,666
So, that was for the loading the data. Now, let's look at loading the labels,

75
00:04:57,711 --> 00:04:59,511
going to have a similar pattern

76
00:04:59,577 --> 00:05:01,644
will see a downloading message.

77
00:05:01,800 --> 00:05:04,930
Here's the URL retrieved to download the source file again,

78
00:05:05,570 --> 00:05:08,740
Again we're using it delete.me as the file name

79
00:05:09,740 --> 00:05:12,820
And we come with gzip.open again

80
00:05:13,300 --> 00:05:16,840
And we're going to unpack the first four bytes that's our magic number.

81
00:05:17,120 --> 00:05:21,800
If they don't match, we raise an exception, we get the next four bytes

82
00:05:22,190 --> 00:05:26,720
starting at 'n' and if that's not equal to the count of images

83
00:05:26,790 --> 00:05:29,390
then something is wrong with the label file also

84
00:05:29,680 --> 00:05:34,180
And now here shall we read the labels they number of bytes who going to read

85
00:05:34,450 --> 00:05:40,290
is c-img which is count of images and the reason that it's exactly that is because

86
00:05:40,460 --> 00:05:43,300
each label is stored in a single byte.

87
00:05:44,820 --> 00:05:47,300
So we store that in our res variable,

88
00:05:48,110 --> 00:05:53,630
We remove the temporary file and then we reshape this as

89
00:05:54,040 --> 00:05:58,880
C as you know cimg row's by one.

90
00:05:59,150 --> 00:06:02,550
So we have that array is returned

91
00:06:03,120 --> 00:06:06,140
and then down here we have the try_download function,

92
00:06:06,560 --> 00:06:09,900
where we give it the data source that's the URL to the data

93
00:06:09,900 --> 00:06:12,600
And label source, the URL to the label

94
00:06:12,810 --> 00:06:14,930
And the count of images and we just

95
00:06:14,930 --> 00:06:17,100
call it to these functions we just went through.

96
00:06:17,100 --> 00:06:19,360
Load data and load labels.

97
00:06:19,470 --> 00:06:26,550
We store it in data and labels and then we use np.hstack

98
00:06:26,680 --> 00:06:31,120
to merge them horizontally into a single array of data and labels.

99
00:06:31,280 --> 00:06:33,750
So what we're going to get out of this is

100
00:06:33,870 --> 00:06:36,760
something that's sixty thousand rows

101
00:06:37,040 --> 00:06:43,640
and 28 by 28 is 784 plus 1 for the label should be 785.

102
00:06:44,190 --> 00:06:46,650
So that should be the shape of the data that comes out of here.

103
00:06:48,530 --> 00:06:50,910
So let's go down here to the next section,

104
00:06:51,500 --> 00:06:54,000
here's we set up all the URLs,

105
00:06:54,000 --> 00:06:58,030
So here's our images for training, our labels for training

106
00:06:58,030 --> 00:07:01,790
and the number of samples is going to be 60,000.

107
00:07:01,790 --> 00:07:03,710
That's the number of images and labels

108
00:07:04,450 --> 00:07:08,170
and here we actually call the try_download to download them,

109
00:07:08,200 --> 00:07:15,440
and we store that in train and then, we do the same thing for the test images

110
00:07:16,830 --> 00:07:20,600
and labels and the number of those is going to be 10,000

111
00:07:20,740 --> 00:07:24,340
and we download those into tests.

112
00:07:24,620 --> 00:07:27,170
So I'm actually going to haven't run this yet

113
00:07:27,180 --> 00:07:29,480
So I'm going to hit Ctrl+Enter on the first code block

114
00:07:29,650 --> 00:07:32,100
and those are all functions so we don't see an output.

115
00:07:32,670 --> 00:07:35,470
Now I'm also going to run this Ctrl+Enter

116
00:07:35,640 --> 00:07:37,980
and we can see the output starting down here.

117
00:07:38,540 --> 00:07:41,600
It's downloading the training images,

118
00:07:41,690 --> 00:07:45,160
training labels and there they are, All done.

119
00:07:45,620 --> 00:07:49,620
If we wanted to test the shape of these we can just insert

120
00:07:50,000 --> 00:08:00,330
little cell here and say mp.shape, so let's say train

121
00:08:00,330 --> 00:08:09,020
and I'm going to predict that's going to be well here. That's right,

122
00:08:09,040 --> 00:08:12,650
60,000 by 785 and if we do the test

123
00:08:13,010 --> 00:08:17,960
it should be 10,000 by 785 there we go.

124
00:08:18,430 --> 00:08:19,880
All right! so that's what we expect.

125
00:08:20,380 --> 00:08:24,460
Here's a little bit of code to visualize one of the digits.

126
00:08:24,670 --> 00:08:27,980
So we're going to pick at random here sample 5,001,

127
00:08:28,390 --> 00:08:31,580
We going to use matplotlibs imshow

128
00:08:31,610 --> 00:08:33,930
to plot the data as an image

129
00:08:34,140 --> 00:08:37,630
we'll turn off our axis and here's our sample number

130
00:08:37,630 --> 00:08:40,860
coming from our training data everything but the last byte

131
00:08:40,890 --> 00:08:45,660
because that last byte is our label and we reshape it to 28 by 28

132
00:08:46,400 --> 00:08:48,510
Which is what I am show wants

133
00:08:48,510 --> 00:08:51,620
and we're going to use a gray scale mapping

134
00:08:52,160 --> 00:08:55,200
and then we'll also have a little print statement saying

135
00:08:56,390 --> 00:09:00,540
what the label is using the minus 1 to get the byte at the end.

136
00:09:01,610 --> 00:09:06,590
So let's run that and there we go!

137
00:09:06,920 --> 00:09:09,440
So it looks like a 3 and the label for it is 3.

138
00:09:09,750 --> 00:09:15,070
So that's a good sanity check. Now that we've got the data

139
00:09:15,070 --> 00:09:18,640
in memory we want to write it to a local disk file

140
00:09:19,200 --> 00:09:24,970
and we also want to use a particular format that CNTK prefers

141
00:09:24,970 --> 00:09:29,600
which is CTF, there CNTK a text format

142
00:09:29,600 --> 00:09:37,170
and what that looks like is

143
00:09:37,170 --> 00:09:40,140
essentially if you can see here there's

144
00:09:40,140 --> 00:09:44,470
a vertical bar labels and then the label

145
00:09:44,470 --> 00:09:47,050
data followed by vertical bar features

146
00:09:47,050 --> 00:09:49,950
in the feature data and so you'll see

147
00:09:49,950 --> 00:09:51,690
that for each line in the text file that

148
00:09:51,690 --> 00:09:54,040
we're going to create. So let's walk

149
00:09:54,040 --> 00:09:56,100
through what this code does, how it does it.

150
00:09:56,100 --> 00:09:59,960
first of all let's review one hot encoding.

151
00:09:59,960 --> 00:10:03,320
So we're going to, right now our labels are stored in a single byte

152
00:10:03,320 --> 00:10:07,830
and we want to expand those to a one hot label. So in this case

153
00:10:07,830 --> 00:10:15,180
0 1 2 3, if our label is 3 we'd want to output a 1 hot label that looks like this.

154
00:10:16,670 --> 00:10:21,400
So let's see how that's done in the code here, we call the save text

155
00:10:21,430 --> 00:10:24,480
we give it a file name and the array of the data.

156
00:10:25,450 --> 00:10:28,100
We get to extract the directory name

157
00:10:28,100 --> 00:10:33,420
from the file name and make sure that it exists if it doesn't exist we create it

158
00:10:34,960 --> 00:10:38,750
and if we don't already have the file and we go through this code otherwise

159
00:10:38,750 --> 00:10:41,180
we can just save file already exists.

160
00:10:41,180 --> 00:10:46,890
So here we say, saving the name of the file we open the file name

161
00:10:46,890 --> 00:10:53,280
'w' says opening it with write and we store the file object in F

162
00:10:54,990 --> 00:11:00,910
and then here is kind of a tricky part. So we're calling this NPI which

163
00:11:00,910 --> 00:11:05,290
makes a diagonal matrix with diagonal ones,

164
00:11:05,290 --> 00:11:06,970
I'll show you how this works let's just

165
00:11:06,970 --> 00:11:11,150
understand this a little better. Let's insert a cell at the bottom that we can

166
00:11:11,150 --> 00:11:11,970
play around with.

167
00:11:11,970 --> 00:11:19,590
So if I just copy and paste this part of it- bring it down here, there we go

168
00:11:21,320 --> 00:11:25,670
and if I run that we'll see what we get is

169
00:11:27,580 --> 00:11:31,470
a 10 by 10 matrix with ones in the diagonal

170
00:11:32,000 --> 00:11:34,750
and if you think about it each row here

171
00:11:34,750 --> 00:11:37,750
is a potential one hot label this would

172
00:11:37,750 --> 00:11:41,520
be for 0, this would be for 1, this will be for 2 & 3 & 4 and so on.

173
00:11:41,520 --> 00:11:45,410
So all we have to do is use our byte label to index into this array

174
00:11:45,410 --> 00:11:51,320
and take the corresponding row values there and that will be our 1 hot label.

175
00:11:52,740 --> 00:11:55,550
So we store that in labels

176
00:11:55,550 --> 00:11:57,550
and then we go through every row in our date array,

177
00:12:00,000 --> 00:12:06,200
We convert the road to a string and then we take this labels

178
00:12:06,200 --> 00:12:08,860
array which is down here this is our big 10 by 10 matrix.

179
00:12:08,860 --> 00:12:14,550
We index it by row of minus 1 and the minus 1 is the last entry in that row

180
00:12:14,550 --> 00:12:16,010
which is our label byte

181
00:12:16,010 --> 00:12:21,080
and so this will give us one of these arrays

182
00:12:21,080 --> 00:12:24,980
for one hot label and we'll store that in label_str

183
00:12:24,980 --> 00:12:36,230
and then we'll take our row value up to - 1 and we'll store that in feature_str

184
00:12:36,230 --> 00:12:42,040
and then we actually do the write to the F file which is our text file

185
00:12:42,040 --> 00:12:46,140
that we're saving to and we'll put the vertical var labels

186
00:12:46,140 --> 00:12:49,120
and then we'll call for an entry from our list here

187
00:12:49,120 --> 00:12:51,430
which will be our label_str

188
00:12:51,430 --> 00:12:55,840
and then we'll do vertical var features and call for an entry

189
00:12:55,840 --> 00:13:01,730
for features. So let's go ahead and run this and see what it looks like

190
00:13:03,100 --> 00:13:04,800
actually that's the definition

191
00:13:04,800 --> 00:13:06,800
of the function we have to come down here

192
00:13:06,800 --> 00:13:10,490
to see it run. so we're going to do some more stuff with paths

193
00:13:10,490 --> 00:13:15,170
we're just trying to figure out here by doing these path joins, it joins

194
00:13:15,170 --> 00:13:22,790
all these path parts together in one path and so we're looking for the

195
00:13:22,790 --> 00:13:24,630
MNIST could be one of two places.

196
00:13:24,630 --> 00:13:29,260
We have examples and tutorials in cntk, so we're first checking to see if it's in

197
00:13:29,260 --> 00:13:34,290
the examples and if it's not then we look inside the tutorials directory.

198
00:13:34,290 --> 00:13:36,080
Once we have our data

199
00:13:36,080 --> 00:13:42,310
we actually save the text to that directory using

200
00:13:42,310 --> 00:13:46,840
the directing file name specified here from the data train

201
00:13:46,840 --> 00:13:53,860
and likewise we join the directory with this file name for the test

202
00:13:54,800 --> 00:14:01,680
cntk. Yeah! Train a test and then I take train test data and then it says

203
00:14:01,820 --> 00:14:03,570
done. So let's run this

204
00:14:03,570 --> 00:14:09,290
and it happens very quickly and now that it that's done let's go and check

205
00:14:09,290 --> 00:14:11,960
and see what our output file looks like this is our directory

206
00:14:11,960 --> 00:14:18,830
we wrote it too. So if we look here we can see the first line

207
00:14:18,830 --> 00:14:22,830
starts with the vertical var labels and then we have a one hot encoding

208
00:14:22,830 --> 00:14:26,660
looks like 0 1 2 3 4 5 this is the digit

209
00:14:26,660 --> 00:14:34,530
for 5. Then here's our features and we should have 784 values

210
00:14:34,530 --> 00:14:37,940
till we get to the next line with this next label says

211
00:14:37,940 --> 00:14:40,820
and that represents our image.

212
00:14:40,820 --> 00:14:45,790
And then it continues on with the next line and new set of encoding's.

213
00:14:45,790 --> 00:14:49,670
And a new set of values for the image and so on and so on.

214
00:14:49,670 --> 00:14:56,790
For in this case this is the trainees that'd be for all 60,000 image label pairs.

215
00:14:59,410 --> 00:15:03,290
Okay! that completes this lab, I

216
00:15:03,290 --> 00:15:06,290
encourage you to go through the lab yourself

217
00:15:06,290 --> 00:15:09,570
try and poke around make sure you understand what's going on

218
00:15:09,570 --> 00:15:15,880
and you can also try some of the suggested exercises at the end.

