0
00:00:00,080 --> 00:00:03,400
Welcome to the lab for module five,

1
00:00:03,530 --> 00:00:06,140
here we will get a Hands-on experience

2
00:00:06,300 --> 00:00:11,440
with Time series modeling using Recurrence.

3
00:00:11,600 --> 00:00:16,280
And the recurrent cells that you'll be using would be the LSTM blocks,

4
00:00:16,360 --> 00:00:18,660
that we have talked during the video lectures.

5
00:00:19,120 --> 00:00:29,060
Let's get started. So I have the code here in this folder Edx

6
00:00:29,500 --> 00:00:38,720
and you can see all my labs are here, what I'm going to do now is I have

7
00:00:39,000 --> 00:00:41,360
activated the environment here using

8
00:00:41,460 --> 00:00:48,640
source activates cntk-py35 on linux or activate cntk-py35

9
00:00:48,760 --> 00:00:54,160
on Windows. And then I am going to launch my Jupiter environment.

10
00:00:56,660 --> 00:01:00,600
And if you are using the Azure environment, Azure notebooks.

11
00:01:00,700 --> 00:01:04,820
Then it would be simply launching those notebooks

12
00:01:05,060 --> 00:01:08,100
in the Azure notebook portal

13
00:01:08,300 --> 00:01:11,230
and we are going to use the Lab5 here.

14
00:01:14,500 --> 00:01:18,880
We will walk you through Time series predictions with LSTMs,

15
00:01:19,100 --> 00:01:23,580
we will use the same IOT Data from the solar panel.

16
00:01:23,700 --> 00:01:27,540
Example :that we have been using our in our lectures.

17
00:01:27,930 --> 00:01:33,260
So this is the solar panel that we are using for

18
00:01:33,660 --> 00:01:38,680
our exemplar data set. Each of these solar panel

19
00:01:38,960 --> 00:01:44,860
emit how much electricity they are generating on a periodical basis.

20
00:01:45,060 --> 00:01:49,540
However you'll see that not always all the panels would

21
00:01:49,730 --> 00:01:51,340
record what they are generating,

22
00:01:51,466 --> 00:01:57,520
so we have to deal with some missing data and which is part of the data set here.

23
00:01:57,640 --> 00:02:03,580
So we have recordings from the solar panel on a half hourly basis

24
00:02:03,600 --> 00:02:09,720
and we also know the total output of the solar panel for a given day.

25
00:02:09,740 --> 00:02:18,980
So in this lab, what we will do is walk you through the following steps,

26
00:02:19,000 --> 00:02:21,840
set up you're already familiar with by now,

27
00:02:21,860 --> 00:02:25,120
so we will not go into it too much.

28
00:02:25,140 --> 00:02:27,420
We will talk a little bit about Data generation.

29
00:02:27,440 --> 00:02:30,560
A lot of time can be spent in Data generation,

30
00:02:30,580 --> 00:02:33,560
when you are dealing with machine learning and deep learning.

31
00:02:33,580 --> 00:02:37,900
It's good to understand what the data looks like and how you want to

32
00:02:37,920 --> 00:02:41,800
process that before you want to start modeling.

33
00:02:41,820 --> 00:02:47,480
With the process data we are going to start modeling our LSTM Network

34
00:02:47,500 --> 00:02:52,360
and then conclude the lab with the Train test and prediction workflow.

35
00:02:52,380 --> 00:03:01,040
We import different components, different packages from the Python

36
00:03:01,413 --> 00:03:05,680
and in the pyplot different packages in the Python environment

37
00:03:05,880 --> 00:03:09,400
pandas in particular we will be using it I will point you to it,

38
00:03:09,420 --> 00:03:18,440
when we get to that particular part of the lab and we import cntk.

39
00:03:18,460 --> 00:03:25,860
Here are some of the code that is used for testing these notebooks

40
00:03:25,880 --> 00:03:29,400
and is not particularly relevant for the lab,

41
00:03:29,420 --> 00:03:33,400
but we just ignore this for in the moment.

42
00:03:33,420 --> 00:03:37,780
We ensure here that the environment that you're running is

43
00:03:37,800 --> 00:03:42,640
using CNTKs released version 2.0.

44
00:03:42,660 --> 00:03:48,140
This notebook actually takes a fair bit of computation

45
00:03:48,160 --> 00:03:54,180
and to let us run this notebook in a relatively quick time frame,

46
00:03:54,200 --> 00:03:56,420
we set this flag to be true.

47
00:03:56,440 --> 00:04:02,100
However, I would encourage you to also try out by setting

48
00:04:02,200 --> 00:04:04,760
this flag False and see how much

49
00:04:04,920 --> 00:04:08,400
difference you see at the end of the

50
00:04:08,520 --> 00:04:14,120
runs between the fast mode and the fast mode being set to True,

51
00:04:14,260 --> 00:04:19,040
and the fast mode set to False. Let's take a look at the

52
00:04:19,180 --> 00:04:23,040
Data generation. So, you have solar panel

53
00:04:23,160 --> 00:04:26,620
which emits two measures and 30-minute interval.

54
00:04:26,720 --> 00:04:30,420
We have the solar.current which is

55
00:04:30,540 --> 00:04:34,640
the reported value of current produced,

56
00:04:34,760 --> 00:04:39,000
by the solar panel and solar.total is the

57
00:04:39,100 --> 00:04:43,120
total produced for the day in watts/hour.

58
00:04:43,240 --> 00:04:53,260
So here, what you see is at 7am, the solar.current reading

59
00:04:53,380 --> 00:04:57,030
and that solar.total,

60
00:04:57,120 --> 00:05:00,440
and you have a series of these values

61
00:05:00,520 --> 00:05:04,880
reported in your IOT data,

62
00:05:04,960 --> 00:05:08,100
that is streaming from those solar panels.

63
00:05:08,520 --> 00:05:14,460
What we will do then is, we start to process the data,

64
00:05:14,580 --> 00:05:16,480
pre-process this in such a way that

65
00:05:16,580 --> 00:05:18,760
we can then use it for modeling.

66
00:05:18,880 --> 00:05:22,700
We read data into pandas data frame and I do recommend using

67
00:05:22,800 --> 00:05:24,530
pandas dataframe for

68
00:05:24,640 --> 00:05:29,280
doing a lot of reading of data that can

69
00:05:29,400 --> 00:05:32,850
be read in chunks and you want to

70
00:05:32,940 --> 00:05:36,480
process them it-- is a convenient package,

71
00:05:36,580 --> 00:05:40,920
that allows you to process the data very efficiently

72
00:05:41,020 --> 00:05:42,090
and saves you a lot of time.

73
00:05:42,220 --> 00:05:45,860
We will then normalize the data, remember

74
00:05:45,940 --> 00:05:48,900
in the MNIST data we had scaled the digits

75
00:05:48,980 --> 00:05:51,240
between 0 and 1. Similarly, here we are

76
00:05:51,360 --> 00:05:55,020
going to normalize the data, within a 0 to 1 range.

77
00:05:55,100 --> 00:05:58,160
Then we want to group the data by the day.

78
00:05:58,260 --> 00:06:00,980
And finally we want to

79
00:06:01,080 --> 00:06:03,940
append the column - solar.current.max,

80
00:06:04,040 --> 00:06:08,720
and solar.total.max and generate the sequence for each day.

81
00:06:08,860 --> 00:06:13,040
Now, let's see what those sequences look like.

82
00:06:13,120 --> 00:06:15,940
So, the measurements for a day

83
00:06:16,040 --> 00:06:19,820
are grouped into a set of sequences like shown here,

84
00:06:19,920 --> 00:06:22,640
and correspond-- each of them corresponds

85
00:06:22,720 --> 00:06:25,830
to the measurement for a day. So in here, you can

86
00:06:25,920 --> 00:06:28,380
see, these are the two readings that are

87
00:06:28,500 --> 00:06:30,750
available to us and the total that were

88
00:06:30,840 --> 00:06:35,860
generated for that particular day is 10300.

89
00:06:35,960 --> 00:06:43,340
As more and more recordings come in from that particular solar panel,

90
00:06:43,420 --> 00:06:45,330
for a given day, you can see

91
00:06:45,400 --> 00:06:47,480
that more and more readings are getting

92
00:06:47,620 --> 00:06:54,460
accumulated but the output of the solar panel--  total output

93
00:06:54,560 --> 00:06:58,780
from the solar panel remains the same. Remember, some of these readings

94
00:06:58,900 --> 00:07:01,600
may be missing or may not be available,

95
00:07:01,720 --> 00:07:02,970
because the solar panel didn't

96
00:07:03,100 --> 00:07:08,200
report those readings for that particular

97
00:07:08,340 --> 00:07:13,360
time point and we have to deal with those kind of situations.

98
00:07:13,440 --> 00:07:16,820
Now, our sequence would be one of these

99
00:07:16,900 --> 00:07:21,320
instances here. For instance, there would be some anywhere between

100
00:07:22,260 --> 00:07:29,000
8 to14 recordings in our dataset,

101
00:07:29,180 --> 00:07:32,660
when we have finally processed it and cleansed it

102
00:07:32,780 --> 00:07:35,760
and the corresponding. So that would be your

103
00:07:35,880 --> 00:07:39,120
the X - the input and the Y would be

104
00:07:39,220 --> 00:07:42,380
the total current that is generated

105
00:07:42,500 --> 00:07:45,000
by the solar panel for that particular day.

106
00:07:45,140 --> 00:07:47,630
Now, why I said 8 to 14 is that, if we

107
00:07:47,740 --> 00:07:50,560
have less than 8 data points, for any

108
00:07:50,640 --> 00:07:53,780
particular day, then we skip that

109
00:07:53,880 --> 00:07:55,960
pretty skip that data point all together

110
00:07:56,080 --> 00:07:59,060
because it's very unpredictable

111
00:07:59,180 --> 00:08:03,800
and what's going on that particular---

112
00:08:03,840 --> 00:08:06,020
it is very unpredictable, what is going

113
00:08:06,040 --> 00:08:09,590
on that particular day and it could be

114
00:08:09,610 --> 00:08:11,990
that many of the solar panels stopped

115
00:08:12,010 --> 00:08:14,600
functioning and stopped reporting.

116
00:08:14,680 --> 00:08:17,650
So that would lead to a different workflow

117
00:08:17,670 --> 00:08:19,173
if you were to build an application

118
00:08:19,200 --> 00:08:22,220
where you would send an alert saying

119
00:08:22,240 --> 00:08:25,090
that you have fewer than 8 data points

120
00:08:25,110 --> 00:08:26,530
being recorded, so there might be

121
00:08:26,550 --> 00:08:29,530
something that is going on either the

122
00:08:29,550 --> 00:08:32,690
solar panel is flaky or something's going

123
00:08:32,710 --> 00:08:36,340
wrong and if we get more than 14 data

124
00:08:36,360 --> 00:08:39,010
points we are also truncating it in this

125
00:08:39,030 --> 00:08:42,520
case because we feel that 14 data points

126
00:08:42,540 --> 00:08:44,660
more than adequate for us to be able

127
00:08:44,680 --> 00:08:47,300
to predict what the output of the solar

128
00:08:47,320 --> 00:08:49,930
panel would be for that particular day.

129
00:08:49,950 --> 00:08:52,510
These data sets are available in a

130
00:08:52,530 --> 00:08:55,450
comma-separated value file and what we

131
00:08:55,470 --> 00:08:59,140
do here in this function, we the function

132
00:08:59,160 --> 00:09:07,450
generate_solar_data, we take the URL as an input where

133
00:09:07,470 --> 00:09:09,920
the data lies and here you can see that

134
00:09:09,940 --> 00:09:13,270
it's solar.csv once you run the

135
00:09:13,290 --> 00:09:17,080
notebook you will be able to see where

136
00:09:17,100 --> 00:09:23,500
it downloaded, let's see so in this case

137
00:09:23,520 --> 00:09:26,300
my data should have been downloaded

138
00:09:26,320 --> 00:09:41,610
because I've already run the notebook

139
00:09:41,630 --> 00:09:48,250
you can see under the iot folder here, I

140
00:09:48,270 --> 00:09:51,340
have that solar.csv file. You can

141
00:09:51,360 --> 00:09:53,350
investigate that file what's in there

142
00:09:53,370 --> 00:09:57,390
and understand what is the input to this

143
00:09:57,410 --> 00:10:01,360
pre-processing function. We use the

144
00:10:01,380 --> 00:10:05,620
pandas read_csv functionality to read

145
00:10:05,640 --> 00:10:08,620
the data and then we do a normalization

146
00:10:08,640 --> 00:10:11,590
like I was talking about this is

147
00:10:11,610 --> 00:10:14,890
important for our models to function

148
00:10:14,910 --> 00:10:19,750
well where we compress the data into a

149
00:10:19,770 --> 00:10:23,770
range of 0 to 1 and then we group the

150
00:10:23,790 --> 00:10:30,690
data by the date or for a given date.

151
00:10:30,710 --> 00:10:36,240
Once we have the sequences

152
00:10:36,260 --> 00:10:39,980
these sequences collated

153
00:10:40,000 --> 00:10:44,900
that becomes our input here X and the

154
00:10:44,920 --> 00:10:50,880
corresponding Y, let me draw it here.

155
00:10:50,900 --> 00:11:00,940
So this becomes our X and this is becomes Y.

