{
  "start": [
    3450, 
    12131, 
    16925, 
    21331, 
    23781, 
    27821, 
    31861, 
    35902, 
    40340, 
    45364, 
    49741, 
    53663, 
    58344, 
    61121, 
    64831, 
    67671, 
    70461, 
    75381, 
    80801, 
    84351, 
    89091, 
    93281, 
    97571, 
    102741, 
    105840, 
    109311, 
    115772, 
    121141, 
    126875, 
    130535, 
    135301, 
    138851, 
    141512, 
    145696, 
    149397, 
    152450, 
    158311
  ], 
  "end": [
    12130, 
    16924, 
    21330, 
    23780, 
    27820, 
    31860, 
    35901, 
    38297, 
    45363, 
    49740, 
    50983, 
    58343, 
    61120, 
    64830, 
    67670, 
    70460, 
    75380, 
    80800, 
    84350, 
    89090, 
    93280, 
    97570, 
    102740, 
    104060, 
    109310, 
    111182, 
    121140, 
    126874, 
    130534, 
    135300, 
    138850, 
    141511, 
    145695, 
    149396, 
    150860, 
    158310, 
    161430
  ], 
  "text": [
    "Function parameters allow data to be passed to and used by functions.", 
    "This example uses a parameter in the function definition.", 
    "Say_this has phrase inside the parentheses and", 
    "that is the name of a variable.", 
    "That variable gets used inside the function code, in this case,", 
    "in a print statement that is indented inside of the function.", 
    "So to call that function, we just call it with the argument,", 
    "which in this case is a string, HI.", 
    "And there we go with the string getting passed into the variable", 
    "in the parameter list and then that gets used to print.", 
    "And we can change that.", 
    "And we see that it will continue to update with whatever value", 
    "gets passed as an argument.", 
    "So the parameter can be used within the function.", 
    "I have a very similar function called yell_this.", 
    "And it does exactly what say_this says, except that", 
    "it uses a string method to make the phrase into upper case and", 
    "it uses string addition to put a exclamation point at the end.", 
    "So let's call with good morning and", 
    "we see that this works as the example above.", 
    "But what if we wanted a default value, so", 
    "that we can call this without any arguments?", 
    "So I want to call yell_this just with parenthesis and", 
    "no argument inside.", 
    "How I would do that is when I define my parameter,", 
    "I would assign it a value.", 
    "So I just assigned it a default value of good night and", 
    "I can still call it with an argument like good morning and", 
    "I expect it to act as it did before and", 
    "it'll just ignore my default value.", 
    "But if I call it with no value, it will use the default value.", 
    "So let's run that code.", 
    "And we see that in the first instance of the call good morning,", 
    "the argument was passed and the second with no values,", 
    "it uses the default.", 
    "So now, we know how to define functions with arguments and", 
    "we know how to give those arguments default values."
  ]
}