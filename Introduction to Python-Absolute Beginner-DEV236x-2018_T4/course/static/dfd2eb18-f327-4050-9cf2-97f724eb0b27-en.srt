0
00:00:00,360 --> 00:00:05,290
We have now mastered all the components that we need

1
00:00:05,290 --> 00:00:10,850
to put together our application of forecasting the output

2
00:00:10,850 --> 00:00:15,670
of a solar panel based on past

3
00:00:15,670 --> 00:00:21,660
observations of what the panel produced.

4
00:00:21,660 --> 00:00:27,763
That was over timeseries of, say, 14 data points.

5
00:00:27,763 --> 00:00:32,460
We'll see how the module is made.

6
00:00:32,460 --> 00:00:37,365
But before we get to that, an important component of any

7
00:00:37,365 --> 00:00:42,420
machine learning as well as deep learning technologies,

8
00:00:42,420 --> 00:00:44,760
is to figure out what to do with the data.

9
00:00:45,830 --> 00:00:46,560
In the tutorial,

10
00:00:46,560 --> 00:00:50,710
you'll see there is a lot of code that goes towards preparing

11
00:00:50,710 --> 00:00:55,650
the data, and understanding the data is equally important.

12
00:00:56,950 --> 00:01:01,580
In the next several slides, I'll walk you through

13
00:01:01,580 --> 00:01:06,630
what the data are with respect to the IoT device.

14
00:01:06,630 --> 00:01:08,040
In this case, it's a solar panel.

15
00:01:10,320 --> 00:01:13,430
So the output of the solar panel are measurements

16
00:01:13,430 --> 00:01:16,420
that are recorded at every 30 minutes interval.

17
00:01:16,420 --> 00:01:17,428
This is our data.

18
00:01:17,428 --> 00:01:22,470
Each time point, we record the solar.current,

19
00:01:22,470 --> 00:01:26,800
which is the current production in Watts.

20
00:01:28,670 --> 00:01:32,540
And solar.total, which is the total production for the day, so

21
00:01:32,540 --> 00:01:33,695
far in Watts/hour.

22
00:01:36,710 --> 00:01:39,030
This is what the data looks like.

23
00:01:39,030 --> 00:01:44,037
Starting at a time in the day, two values are recorded.

24
00:01:44,037 --> 00:01:49,513
At 7 AM, 6.3 units was the solar.current value,

25
00:01:49,513 --> 00:01:53,323
which is the current production, and

26
00:01:53,323 --> 00:01:57,620
the total output at that point was 1.7.

27
00:01:57,620 --> 00:01:58,445
At 7:30,

28
00:01:58,445 --> 00:02:02,091
it was similarly recorded what were the current production and

29
00:02:02,091 --> 00:02:05,130
what were the total production, so on and so forth.

30
00:02:06,700 --> 00:02:08,930
We are using about 3 years worth of data.

31
00:02:12,232 --> 00:02:15,390
And the input data that we are using is not cleansed.

32
00:02:16,450 --> 00:02:21,350
So it's very important that you build your code and

33
00:02:21,350 --> 00:02:24,770
definitely budget time to cleanse errors

34
00:02:24,770 --> 00:02:26,860
that might be present in your raw input data.

35
00:02:28,000 --> 00:02:32,615
For instance, there could be a panel that failed to report, and

36
00:02:32,615 --> 00:02:34,750
it is included with the data.

37
00:02:36,330 --> 00:02:37,950
There are two ways.

38
00:02:37,950 --> 00:02:40,360
One is to purge some of the data,

39
00:02:40,360 --> 00:02:43,930
or, using deep learning techniques,

40
00:02:43,930 --> 00:02:48,360
you can use the model to compensate for the missing data.

41
00:02:50,120 --> 00:02:53,654
So here is the goal for our data pre-processing.

42
00:02:55,530 --> 00:03:01,590
Compose sequence such that each training instance will be X.

43
00:03:01,590 --> 00:03:06,200
Remember, this is our input, which is the solar.current from

44
00:03:06,200 --> 00:03:09,480
time equals 1 to time equals 14.

45
00:03:09,480 --> 00:03:16,110
This corresponds to one days worth of records from the panel.

46
00:03:16,110 --> 00:03:19,560
And Y is the predicted total production for a future day.

47
00:03:22,220 --> 00:03:24,050
What are the steps?

48
00:03:24,050 --> 00:03:27,220
First, we read raw data into a pandas dataframe.

49
00:03:29,430 --> 00:03:30,610
We normalize the data.

50
00:03:32,900 --> 00:03:39,936
Group the data by day, append these columns to the dataframe,

51
00:03:39,936 --> 00:03:45,130
and then generate the sequences for each day.

52
00:03:47,856 --> 00:03:52,481
Some data filtering that we do is, if we have less than 8 data

53
00:03:52,481 --> 00:03:57,199
points, that means between time 1 to 14, if there are more

54
00:03:57,199 --> 00:04:01,210
than eight missing data points, then we skip.

55
00:04:01,210 --> 00:04:04,475
We don't use it for the modeling purposes.

56
00:04:04,475 --> 00:04:10,660
And if we have more than 14 data points, we simply truncate.

57
00:04:10,660 --> 00:04:15,168
Now, once this sequence of X and Ys are formed, note,

58
00:04:15,168 --> 00:04:18,405
we do not need the timestamps anymore.

59
00:04:18,405 --> 00:04:23,340
And each pair of X and Y are self-contained instances that

60
00:04:23,340 --> 00:04:26,570
are used in our training of the model.

