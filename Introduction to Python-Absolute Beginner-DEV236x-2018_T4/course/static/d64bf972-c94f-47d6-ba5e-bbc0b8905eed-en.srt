0
00:00:02,980 --> 00:00:07,980
Functions can not only take in values with arguments.

1
00:00:07,981 --> 00:00:10,280
They can also return,

2
00:00:10,281 --> 00:00:13,830
using the return keyword within the body of the function.

3
00:00:15,330 --> 00:00:18,870
In our first example of a function call with a return value,

4
00:00:18,871 --> 00:00:20,305
we're gonna look at msg_double.

5
00:00:21,940 --> 00:00:26,280
In the body of the msg_double function in the code we see

6
00:00:26,281 --> 00:00:27,630
return keyword.

7
00:00:27,631 --> 00:00:32,970
The return keyword is always followed by an object.

8
00:00:32,971 --> 00:00:34,941
In this case, it is the variable called double.

9
00:00:37,753 --> 00:00:42,735
The return value could also be followed by a literal string, or

10
00:00:42,736 --> 00:00:44,807
a number, or any object.

11
00:00:47,470 --> 00:00:51,130
What happens when you call a function with a return value?

12
00:00:52,780 --> 00:00:57,228
Here we call msg_double with the argument let's go

13
00:00:57,229 --> 00:00:59,866
in the quotations, a string.

14
00:01:03,059 --> 00:01:07,126
The parameter phrase gets replaced with

15
00:01:07,127 --> 00:01:10,600
the value let's go in quotation.

16
00:01:14,144 --> 00:01:20,783
The variable double, Adds let's go with a space to itself.

17
00:01:24,344 --> 00:01:29,040
Double gets returned to replace this function call.

18
00:01:30,490 --> 00:01:33,875
When you call a function with a return value,

19
00:01:33,876 --> 00:01:37,360
the return value replaces the function call.

20
00:01:39,801 --> 00:01:40,860
Let's run the code.

21
00:01:42,550 --> 00:01:45,691
We see that the message let's go let's go is printed.

22
00:01:49,517 --> 00:01:52,580
This is the value let's go let's go,

23
00:01:52,581 --> 00:01:58,460
because this function call is replaced by the return value.

24
00:01:58,461 --> 00:02:02,718
And we captured that return value in a variable, and printed it.

25
00:02:04,629 --> 00:02:10,000
Let's look at a slightly lighter example.

26
00:02:10,001 --> 00:02:12,870
This has taken away all of the variables

27
00:02:12,871 --> 00:02:17,040
used in the body of the function, and we just use the parameter value.

28
00:02:19,730 --> 00:02:24,400
The function half_value divides the value by two.

29
00:02:25,940 --> 00:02:28,192
So when we call half_value,

30
00:02:28,193 --> 00:02:32,344
we expect that it will be replaced by the return value.

31
00:02:34,632 --> 00:02:40,782
42 is sent as the argument and is used in the parameter value,

32
00:02:40,783 --> 00:02:45,202
and divided by 2, so we're gonna get 21.

33
00:02:45,203 --> 00:02:46,440
Let's check and see.

34
00:02:48,618 --> 00:02:53,730
So that return value replaced the function call.

35
00:02:53,731 --> 00:02:57,312
And we printed it, and we see that it has a float value of 21.

36
00:02:57,313 --> 00:03:01,726
The keyword return allows a function to send

37
00:03:01,727 --> 00:03:05,550
back a value to the calling function.

