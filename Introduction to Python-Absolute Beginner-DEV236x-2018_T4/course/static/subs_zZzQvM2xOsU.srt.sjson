{
  "start": [
    4282, 
    8101, 
    12607, 
    15741, 
    19521, 
    21191, 
    23341, 
    26851, 
    27739, 
    30514, 
    33311, 
    35921, 
    38984, 
    41801, 
    44720, 
    47081, 
    48991, 
    52531, 
    55371, 
    57481, 
    63802, 
    68471, 
    72950, 
    77890, 
    80760, 
    86955, 
    90639, 
    91801, 
    95651, 
    101221, 
    104220, 
    109518, 
    112537, 
    117731, 
    120871, 
    125541, 
    128331, 
    131171, 
    133841, 
    137561, 
    142608, 
    145961, 
    155763, 
    158591, 
    163295, 
    169587, 
    170741, 
    176900, 
    179481
  ], 
  "end": [
    8100, 
    12606, 
    15740, 
    19520, 
    21190, 
    23340, 
    26850, 
    27738, 
    30513, 
    33310, 
    35920, 
    38983, 
    41800, 
    42880, 
    47080, 
    48990, 
    52530, 
    55370, 
    57480, 
    61368, 
    68470, 
    71420, 
    75870, 
    78780, 
    86954, 
    90638, 
    91800, 
    95650, 
    101220, 
    102590, 
    106217, 
    112536, 
    117730, 
    120870, 
    125540, 
    128330, 
    131170, 
    133840, 
    137560, 
    139007, 
    145960, 
    151379, 
    158590, 
    163294, 
    164414, 
    170740, 
    175100, 
    179480, 
    181630
  ], 
  "text": [
    "A while loop runs while a condition is true.", 
    "If you write while with the keyword true, it will run forever.", 
    "And is what is known as an infinity loop.", 
    "Let's take a look at why the while True loop runs forever.", 
    "Here, we have the keyword true.", 
    "It can't evaluate to anything but true.", 
    "And so this while loop keeps continuing when it gets to the end", 
    "of the indentation.", 
    "But this while true loop only runs one time,", 
    "because we have the keyword break.", 
    "Break breaks out of a loop.", 
    "It returns to the code after the indentation.", 
    "And would run anything that follows.", 
    "Let's run the code here.", 
    "It runs once and then breaks.", 
    "It's kind of a meaningless while true loop,", 
    "because it's hard-coded break and there's no conditional.", 
    "So we need to look at an example that has a conditional for", 
    "the break, an If statement.", 
    "Here, if this evaluates to true, a break statement will run.", 
    "This while true loop takes a number_guess input.", 
    "It has a secret number that it's gonna compare against.", 
    "The number is 5, hard coded above.", 
    "Let's run the code.", 
    "If I put in anything but a number, it will be incorrect.", 
    "Because we're comparing my number guess from the input to", 
    "the string five.", 
    "If it's not the number five in a string format,", 
    "then it will give the message that your guess is incorrect.", 
    "So we can put in the number.", 
    "And finally yes we are correct.", 
    "Let's look at another example,", 
    "where we get input and we ask it to be just a single word.", 
    "So a single word has no spaces and", 
    "it is a word and uses only alphabetical characters.", 
    "So we're gonna use the is alpha check.", 
    "This will evaluate as false for", 
    "anything that is not an alphabetical character.", 
    "So a space or some type of symbol.", 
    "I'll put in a full name.", 
    "It says that Alton Derosa is not a single word.", 
    "Because the space failed the isalpha check, the else statement runs.", 
    "I can't spell Alton with the at symbol.", 
    "That is not an alphabetical character, so again, it fails, and", 
    "the else runs.", 
    "Welcome, Alton.", 
    "We finally wrote just a single word of all alphabetical characters.", 
    "A while true loop will loop forever,", 
    "until it encounters a break statement."
  ]
}