{
  "start": [
    6531, 
    11891, 
    15882, 
    21151, 
    25281, 
    30661, 
    35483, 
    39513, 
    46072, 
    51403, 
    55823, 
    62802, 
    67864, 
    73491, 
    77241, 
    84490, 
    89221, 
    90621, 
    94841, 
    98611, 
    104383, 
    108906, 
    110273, 
    115434, 
    118274, 
    122445, 
    127114, 
    131361, 
    136621, 
    140346, 
    143181
  ], 
  "end": [
    11890, 
    15881, 
    21150, 
    25280, 
    30660, 
    35482, 
    39512, 
    43791, 
    51402, 
    55822, 
    60003, 
    67863, 
    73490, 
    77240, 
    82324, 
    89220, 
    90620, 
    94840, 
    98610, 
    104382, 
    108905, 
    110272, 
    115433, 
    118273, 
    122444, 
    127113, 
    131360, 
    136620, 
    140345, 
    143180, 
    147360
  ], 
  "text": [
    "Let's look at some examples of functions that will take arguments.", 
    "The print statement can take zero to many arguments.", 
    "And here's an example of the print statement with two arguments.", 
    "The first argument is the string Hello and then there is", 
    "a comma which separates the next argument which is World string.", 
    "And so, print statement that just sends whatever strings are in", 
    "there to standard out so, we can go and run that cell.", 
    "And we see, Hello World like we expect but print is unique in that,", 
    "It can take a variable amount of arguments including zero arguments.", 
    "So, let's run that cell now and we see now there's a extra space there.", 
    "And we can even call print with one argument.", 
    "And then, it's a little easier to see, right there that we have", 
    "a blank line that was printed when we sent it zero argument.", 
    "Print can take two arguments or no arguments or", 
    "one arguments and can take up to, almost infinite amount of arguments.", 
    "In this second example, we have the type function and type is not so", 
    "forgiving.", 
    "It will take exactly one argument of an object and tell you it's type.", 
    "In this case, we put a number 2.2 in there and", 
    "another thing about type, it doesn't have the same behavior as print.", 
    "It doesn't put its answer out to the standard output it just", 
    "returns a value.", 
    "And so, right here I'm storing that value in a variable called my_type.", 
    "And so, let's look at how type will work.", 
    "So if I hit Enter then, type will return it's value", 
    "into the my_type variable and then we can run my_type.", 
    "You see what was in there, yep, 2.2 that's a float.", 
    "So, we're seeing that arguments can be sent to functions", 
    "in many different ways where there's a required amount, one or", 
    "as any other specific number of arguments.", 
    "Or they can be variable like we have here with the print statement."
  ]
}