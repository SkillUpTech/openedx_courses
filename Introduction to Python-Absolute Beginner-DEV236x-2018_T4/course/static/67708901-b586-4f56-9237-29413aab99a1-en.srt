0
00:00:00,640 --> 00:00:03,350
So I've been alluding to you that parameter

1
00:00:03,350 --> 00:00:07,086
in the convolution operation where we say padding is equal to

2
00:00:07,086 --> 00:00:08,410
true or false.

3
00:00:08,410 --> 00:00:10,860
We get to understand here what that means.

4
00:00:12,820 --> 00:00:14,250
So let's start here.

5
00:00:14,250 --> 00:00:17,367
You can see the image of the red, green, and

6
00:00:17,367 --> 00:00:19,396
the blue image that we have.

7
00:00:19,396 --> 00:00:26,340
And around it we have laid out an array of zeroes.

8
00:00:26,340 --> 00:00:30,305
Whenever we do that, that operation is called padding.

9
00:00:30,305 --> 00:00:34,702
So this set of zeroes that we have added here and here,

10
00:00:34,702 --> 00:00:37,730
we call it zero padding.

11
00:00:37,730 --> 00:00:40,410
And what implication does it have?

12
00:00:40,410 --> 00:00:41,950
What operation does it entail?

13
00:00:43,180 --> 00:00:48,490
So here is an example of what happens when you do no padding.

14
00:00:48,490 --> 00:00:50,419
As you'll notice,

15
00:00:50,419 --> 00:00:56,210
the kernel here cannot step outside the bounds of the image.

16
00:00:58,850 --> 00:01:03,542
Can only have effectively four locations that

17
00:01:03,542 --> 00:01:08,354
can be mapped for that corresponding kernel and

18
00:01:08,354 --> 00:01:11,850
this image shape with no padding.

19
00:01:14,390 --> 00:01:17,830
Now if you add the zeroes, you have a little bit of better

20
00:01:17,830 --> 00:01:21,810
control of shape of what the output might look like.

21
00:01:21,810 --> 00:01:26,000
In other words, in the previous case without padding,

22
00:01:26,000 --> 00:01:29,040
with no padding, our image became a lot smaller

23
00:01:29,040 --> 00:01:30,740
when we did the convolution operation.

24
00:01:31,780 --> 00:01:33,420
But in this case with padding,

25
00:01:33,420 --> 00:01:37,080
where we have added a set of zeroes around the boundaries,

26
00:01:37,080 --> 00:01:42,020
you can see that the input image here in orange

27
00:01:42,020 --> 00:01:46,720
is the same as the output image in green in terms of the size.

28
00:01:46,720 --> 00:01:49,720
Obviously the values are gonna be different based on whatever

29
00:01:49,720 --> 00:01:54,110
the convolution operation from that particular kernel with

30
00:01:54,110 --> 00:01:58,420
respect to the image pixels lying underneath it means.

31
00:01:58,420 --> 00:02:05,242
So this is with Stride 1, which means that for every image, You

32
00:02:05,242 --> 00:02:09,530
would just slide to the adjacent value here, by one step.

33
00:02:10,730 --> 00:02:15,500
Now you can do that with more number of steps, and

34
00:02:15,500 --> 00:02:18,150
that will be the Stride parameter.

35
00:02:18,150 --> 00:02:24,090
So in this case, the stride is set to 2, and when you do that

36
00:02:24,090 --> 00:02:30,140
with a larger stride, your image automatically shrinks.

37
00:02:31,460 --> 00:02:33,820
Please take a moment to look through these

38
00:02:34,960 --> 00:02:39,560
animations to convince yourself that that indeed is the case.

39
00:02:39,560 --> 00:02:44,705
The number of positions where this kernel can move

40
00:02:44,705 --> 00:02:49,851
with a stride of 2 would be these smaller number of

41
00:02:49,851 --> 00:02:55,506
pixels in the output compared to the input image here.

42
00:02:55,506 --> 00:03:00,064
Now, with these padding operations,

43
00:03:00,064 --> 00:03:03,656
our convolution operation for

44
00:03:03,656 --> 00:03:08,290
the entire image is animated here.

45
00:03:08,290 --> 00:03:13,038
Again, there's a good reference of the Stanford GitHub site

46
00:03:13,038 --> 00:03:14,597
that you can refer.

47
00:03:14,597 --> 00:03:18,408
But do take a moment to convince yourself that indeed these

48
00:03:18,408 --> 00:03:21,833
animations are reflective of your understanding of

49
00:03:21,833 --> 00:03:26,208
the convolution operations that we have described in this video.

