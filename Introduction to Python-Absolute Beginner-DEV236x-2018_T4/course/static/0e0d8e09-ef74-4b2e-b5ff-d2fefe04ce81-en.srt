0
00:00:00,020 --> 00:00:02,970
We're going to walk through the requirements for

1
00:00:02,970 --> 00:00:05,520
the Required Coding Activity for

2
00:00:05,520 --> 00:00:10,705
Module 3 and we're going to do a cheese ordering program.

3
00:00:10,705 --> 00:00:14,805
And so there are the required keywords if,

4
00:00:14,805 --> 00:00:19,808
elif, else, print, input, and float.

5
00:00:19,808 --> 00:00:24,105
If any of these are excluded from your program solution,

6
00:00:24,105 --> 00:00:25,200
you will not get credit.

7
00:00:25,200 --> 00:00:31,500
So make sure that we are covering each of these items.

8
00:00:31,500 --> 00:00:35,300
Let's look at edX page.

9
00:00:35,300 --> 00:00:42,035
And we see there are requirements, right here,

10
00:00:42,035 --> 00:00:46,310
that we just talked about and we also show

11
00:00:46,310 --> 00:00:51,285
some of the requirements and code running.

12
00:00:51,285 --> 00:00:53,870
We also have that on

13
00:00:53,870 --> 00:00:58,460
our Jupiter notebook and in this case I'm going

14
00:00:58,460 --> 00:01:01,270
to run some sample code that I've

15
00:01:01,270 --> 00:01:06,330
pre-loaded and just show you how the program should work.

16
00:01:06,330 --> 00:01:10,850
So, we have the requirements to enter

17
00:01:10,850 --> 00:01:16,625
in some values that are above 100,

18
00:01:16,625 --> 00:01:20,140
below .25,

19
00:01:20,140 --> 00:01:22,610
and somewhere in between and so that

20
00:01:22,610 --> 00:01:25,125
we can give different types of messages.

21
00:01:25,125 --> 00:01:26,960
So you put in your order value.

22
00:01:26,960 --> 00:01:29,780
So here I'll put in something bigger than 100.

23
00:01:29,780 --> 00:01:32,680
So we'll just go a little bit bigger 101 and you can

24
00:01:32,680 --> 00:01:35,900
also do that with decimal places,

25
00:01:35,900 --> 00:01:37,790
because we are going to convert

26
00:01:37,790 --> 00:01:41,830
this string input into a float and then it gives us

27
00:01:41,830 --> 00:01:45,320
a message that "101.9 is

28
00:01:45,320 --> 00:01:47,150
more than is currently

29
00:01:47,150 --> 00:01:49,490
available in stock" so they can fulfill that order,

30
00:01:49,490 --> 00:01:52,280
we'll run it again and then we'll

31
00:01:52,280 --> 00:01:55,760
put in something below .25 so I go

32
00:01:55,760 --> 00:02:00,850
.01 and we see

33
00:02:00,850 --> 00:02:04,990
that is .01 is below the minimum order amount.

34
00:02:04,990 --> 00:02:13,570
So let's order something in between .25 and 100.

35
00:02:13,570 --> 00:02:15,640
So I'll just say,

36
00:02:15,640 --> 00:02:23,620
55.3 and then it gives us a cost and so that cost has

37
00:02:23,620 --> 00:02:27,220
to convert that amount into

38
00:02:27,220 --> 00:02:31,730
a float value and multiply it by a fixed count per unit.

39
00:02:31,730 --> 00:02:37,617
So we're going to have to by 55.5 times our requirement.

40
00:02:37,617 --> 00:02:40,290
So in our module let's make sure that we're

41
00:02:40,290 --> 00:02:44,620
testing our input within if, and elif,

42
00:02:44,620 --> 00:02:47,295
and then else statement

43
00:02:47,295 --> 00:02:49,935
that we are printing some results,

44
00:02:49,935 --> 00:02:52,995
that we're gathering the input that we used,

45
00:02:52,995 --> 00:02:57,450
and we're converting that input into float values.

