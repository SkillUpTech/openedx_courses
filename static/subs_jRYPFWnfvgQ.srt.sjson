{"start":[780,3310,7270,12300,14660,17115,23150,25580,28481,31310,33781,36160,37325,39400,43244,46920,50185,52090,54540,57570,61335,63220,66850,72751,75740,79290,82985,87800,89630,92870,95570,97250,99905,103025,104870,107620,110575,114190,116050,118960,120760,124550,126520,128400,132190,133720,137500,138730,140080,144925,146230,149880,152420,155055,159820,165015,167640,169980,172410,175170,178550,181590,183540,185010,186540,188880,191640,194648,196170,198450,201195,203580,206235,208140,210337,211720,213640,217980,220420,222970,229180,232890,238735,241530,251740,257280,261910,263755,266400,270630,272340,275807,277140,280635,285455,286680,288030,289470,291060,292770,296190,302830,306820,311620,314040,316620,319020,321940,325530,327135,329543,331650,335085,338580,341820,349195,351900,353060,356420,359275,362385,364280,367895,370985,373985,377885,380330,382640,385220,388130,392525,395120,399520,403240,408195,409480,410860,417470,422350,425830,426850,429250,434510,437495,439015,440980,442713,444460,446440,448300,450160,452260,453460,455740,460060,462575,463510,464555,469230,474575,476940,479580,482905,485610,486750,493990,499230,502750,505785,508890,511650,515255,518040,521022,522570,525510,527715,530370,531630,533670,536820,540850,543805,546405,550025,552720,556805,558270,561680,562980,564900,570840,573480,576382,579365,582783,585540,589860,591930,596469,598890,601920,606780,609240,614630,619765,625015,630480,631690,640945,644001,647495,649720,651625,653650,656460,660755,662440,664855,667315,670425,675803,678650,682845,685630,688600,691240,694480,697810,699550,702930,704575,706600,709020,716180,717860,720680,726370,728410,730720,732513,734650,736285,737320,740284,743290,744965,747460,751045,753700,757540,759820,763480,768790,771890,775510,776710,777860,783445,788710,792600],"end":[3310,7270,12300,14660,17115,23150,25580,28481,31310,33781,36160,37325,39400,43244,46920,50185,52090,54540,57570,61335,63220,66850,72751,75740,79290,82985,87800,89630,92870,95570,97250,99905,103025,104870,107620,110575,114190,116050,118960,120760,124550,126520,128400,132190,133720,137500,138730,140080,144925,146230,149880,152420,155055,159820,165015,167640,169980,172410,175170,178550,181590,183540,185010,186540,188880,191640,194648,196170,198450,201195,203580,206235,208140,210337,211720,213640,217980,220420,222970,229180,232890,238735,241530,246000,257280,261910,263755,266400,270630,272340,275807,277140,280635,285455,286680,288030,289470,291060,292770,296190,302830,306820,311620,314040,316620,319020,321940,325530,327135,329543,331650,335085,338580,341820,349195,351900,353060,356420,359275,362385,364280,367895,370985,373985,377885,380330,382640,385220,388130,392525,395120,399520,403240,408195,409480,410860,417410,422350,425830,426850,429250,434510,437495,439015,440980,442713,444460,446440,448300,450160,452260,453460,455740,460060,462575,463510,464555,468690,474575,476940,479580,482905,485610,486750,492700,499230,502750,505785,508890,511650,515255,518040,521022,522570,525510,527715,530370,531630,533670,536820,540850,543805,546405,550025,552720,556805,558270,561680,562980,564900,570840,573480,576382,579365,582783,585540,589860,591930,596469,598890,601920,606780,609240,614630,619765,625015,630480,631690,640945,644001,647495,649720,651625,653650,656460,660755,662440,664855,667315,670425,675803,678650,682845,685630,688600,691240,694480,697810,699550,702930,704575,706600,709020,716180,717860,720680,726370,728410,730720,732513,734650,736285,737320,740284,743290,744965,747460,751045,753700,757540,759820,763480,768790,771890,775510,776710,777860,783445,788710,792600,797000],"text":["In this video, we're gonna go over","the Azure Cosmos DB SQL query API","which is exposed as part of the Document DB API.","Now, if you want to follow along and play","around with the data set that we'll be exploring,","you can do so by visiting www.documentdb.com/sql/demo.","On this website, we have populated","a collection with a data","set that is the USDA nutritional facts","for a set of food products.","So let's start by running a arbitrary query.","What we're going to do is want to use","the simplest query that you can write which is just","SELECT * from this collection.","And we'll use this to take a look at the records inside.","What you'll see here is we have these food records","where we have a number of","properties including you a record ID,","a description, a tag which is a complex object.","It's actually an array of objects with several tags.","It has a few other properties","including the version of the record, a food group,","a set of nutrients and a long list of other properties.","Now, what this website will allow you to","do is you can run arbitrary queries against it.","And this is a really nice mechanism for you to experiment","and learn and play with the SQL query language.","Now let's take a look at","the basic structure of a SQL query and Cosmos DB.","The core components of","every query is going to be a SELECT clause,","a FROM clause and a WHERE clause.","A SELECT clause allows you to perform projections.","So you can do transformations on","the data being returned from the query.","The FROM clause is intended to allow you to","set an alias for the root document so","that in the SELECT clause and","the WHERE clause you can refer to","the root of the document as","you peek inside of the individual records.","And the WHERE clause is where you can","set filters so that rather than","returning a list of every record from the collection,","what you can do is you can","return a set of records that are only relevant to you.","In this case, what we're going to","do is we're going to look for a record","where the food group is snacks and the ID is 19015.","And we're only going to pull out","the ID description tags and food group properties.","So here we have the ID description tags","and food group properties.","We have one query results record and it matches","the product kits supplied in my WHERE clause.","Now, the filters and","the WHERE clause can actually become quite complex.","We support a wide variety","of complex scalar expressions and","you can include arithmetic comparison","or logical operators with index.","So here, let's look","at something a little bit more sophisticated.","What we're going to do is we're going to look","for food whose manufacturing name is","the Coca Cola company and we're going","to do a version greater than zero.","And what we see here is we","have several query results returned from that.","You can play around with the WHERE clause and","see if you can produce","some more interesting results from it.","Now, let's say we wanted to order the results","coming back from our query.","The way to do","this is you would append an ORDER BY clause.","And an interesting thing to note here","is the use of the dot notation and","the bracket notation for","peeking inside nested objects as well as pulling out","specific array elements from","the nested records in the data set.","So to give you an illustration of this,","let's take a look at the food.servings property.","And as you see, the food servings is actually","an array of objects who have a set of properties.","And if we wanted to peek inside","these servings property and look for","the very first array element and","then peek inside and pull out","the description and the weight in grams,","we can do so by using","this dot notation and bracket notation.","And we can project this out to another value.","And what we're going to do here is","we're going to use that","to pull out the weight in grams","for each individual record.","And we're going to order","the query results by it's weight in descending order.","So here what we'll see is we have a record with 319 and","each subsequent record will be in order of","descending order for the weight.","Now, let's say I don't want to","return all records that match","this WHERE clause or rather I only want to","return the first X records.","The way I'd do so is I would use the TOP operator","in which you can use that to limit","the number of returning values from a query.","So let's say we want the first","20 entries whose food group is snacks.","You can see that the results we only get","20 results back and these","are our snack records.","Cosmos DB also supports the IN and BETWEEN operators.","So let's say you wanted to","find products whose food group matches","poultry products or the food group","equals sausages and luncheon meat.","Rather than having a chain of a bunch","of OR equal predicates,","what you can do is you can use the IN clause to","supply a list of","elements who you will match on this property.","You can also use the BETWEEN clause so","that if you want to define","records whose let's say the ID is between","this value and this value,","this will allow you to produce a match on all of","the records between these two values","without having to explicitly enumerate them.","So here we're looking for records whose ID is","between 05740 and 07050.","And what you'll see is that","we're actually getting a bunch of","IDs who are between these two values.","The SELECT clause can be","quite useful for doing transformations and projections.","And what we're going to do","here is we're going to take a record","who has a serving property who has an array.","And within that array it has","an element which is","an object that has a set of properties,","descriptions and weight in grams.","And let's say what we wanted to do was we","want to project this into a transformation so","that rather than returning","a complex object in which we","would have nested arrays and nested objects,","what we're going to do is we're going to pull","those values up and build","a completely new JSON record as part of the query result.","And as we build this new JSON object,","what we're going to do is we're going to","pull this value out","and we're going to name it serving description.","The JOIN keyword is a little bit different in Cosmos DB,","in which it's not an intra-document JOIN.","Meaning, it doesn't actually look across records but","rather what it does is it actually looks within a record.","And to give you some context on why this is useful,","let's take a look at","a food record in which we have a nested array.","What you see here is we have an array of","objects and you learned earlier that","what we can do is we can find entries","in which we can peek","inside this list of arrays by","using this bracket notation and factoring out and index.","But let's say we wanted to filter out","where the tag is equal to blueberries,","but instead of looking at","just the very first array entry,","what we want to do is we want to","look across records where blueberries","might not necessarily be","the very first object but it could","be the second tag","or the third tag or the fourth tag in this array.","The way you can do so is using the JOIN clause.","The JOIN clause basically performs","a cross product from within that record.","And so, you can think of that as a cross product from","the root record from here.","And what we're going to do is we're going to a peek","inside this array of tags.","And what we're going to do is we're going to do","a cross product from the root","to these individual nested array elements.","And by doing so, what we can do now is rather than","refer to attack by its array index,","what we can do is we can pull out the tag in","the form of this cross product and you'll","see now we're able to query across all of","the different array indices.","You can also pull","out the tag and put it into the projection.","And so, what you can do here now is we're going to","pull out the food ID and the tag.","And what you'll find is a bunch of records where you have","both the root document as well as","the nested array element that you've pulled up.","Cosmos DB SQL API","also supports a number of built-in functions.","So you can do things like IS_DEFINED or ROUND.","Basically you have a bunch of","mathematical string and other utility built-in functions.","And if you wanted to customize the function,","it also supports the concept of user-defined functions.","And so, for user-defined functions you can write","some arbitrary java scripts","and then invoke that java script","by doing UDF dot","the name of the function that you have written.","So here what we've done is","we've implemented a user defined function","that basically performs a RegEx,","regular expression match.","One thing to note is that user-defined functions can: A,","contain very complex business logic; and B,","because of that are not optimized to run on an index.","And as a result, it is still","best practice to not write queries where","you only have to or rely solely on","a UDF for performing a filter,","but rather you want to have a predicate that runs on","the index and then out of","those results you can then apply the UDF.","The UDF can also be","inserted into the projection","if you want to do transformations.","Lastly, Cosmos DB SQL API supports geospatial functions.","And so, here we're going to take a look at","a different data set in which we have a bunch of","volcanoes on our map.","And what we're going to do here is each of","these volcanoes have a co-ordinate,","a latitude and longitude.","And what the geospatial functions","allow you to do is look for","points that are within","a distance or points that are within a polygon.","Also it supports not only indexing points","but also indexing polygons.","So if you want to find polygons within a set distance or","polygons within another polygon, you can also do so.","Here what we're doing is we're looking for","all volcanoes within a set distance","from this latitude longitude coordinate.","And as you can see, as we increase the radius what you'll","see is more search results coming back from the query.","And here what we have is a polygon that","represents the shape of Washington state.","So if we run this query,","you'll actually get all of","the points that meet this criteria,","which is all the points within this bounding polygon.","That concludes our video for","introducing the SQL query API. Thank you for watching."]}