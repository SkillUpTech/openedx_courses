{"start":[490,3720,7475,10030,13450,16240,20800,25350,27825,30610,33530,37570,41005,45485,48720,51585,55110,58985,60880,63475,66640,70630,73810,75910,78700,82000,84970,88652,91285,93550,95470,97570,100630,103080,106235,110875,114000,117710,119580,124430,126870,128670,132265,135610,139483,141575,142830,144350,146430,149255,152855,155840,158460,160250,163225,167330,171440,173600,175130,178085,180380,182255,185075,188500,191720,195575,197360,201405,204765,206240,208070,210020,212813,215355,217110,219060,222735,225000,227408,229080,232950,235465,237990,239655,241120,243250,245520,247235,248400,252270,255165,260180,262620,264750,267075,268590,270360,276150,277640,279675,281610,283090,284550,287490,289575,291840,297150,300900,305617,309100,313245,315950,319430,321260,324665,326680,330255,333575,334740,338420,340370,343800,345860,350080,352340,354635,356290,357490,359530,362700,364645,367300,370445,372205,374440,380479,382495,385210,386680,391720,394510,396170,399238,402980,405625,408880,411835,416520,419950,424355,427270,427865,428980,431745,435290,437540,440090,442730,445610,447620,451920,455034,456875,459775,465790,468914,471910,473450,475330,479360,480710,482300,485540,488675,492815,494210,496705,499670,503180,504830,507140,512540,515315,519425,525765,528465,532366,535405,539825,542060,544670,546460,548780,550690,553010,555920,558470,560690,562520,564848,569495,571475,573590,577310,581315,585170,586785,588862,591425,593930,597410,598845,600560,603260,604880,608885,612555,615725,618280,621125,625365],"end":[3720,7475,10030,13450,16240,20800,25350,27825,30610,33530,37570,41005,45485,48720,51585,55110,58985,60880,63475,66640,70630,73810,75910,78700,82000,84970,88652,91285,93550,95470,97570,100630,103080,106235,110875,114000,117710,119580,124430,126870,128670,132265,135610,139483,141575,142830,144350,146430,149255,152855,155840,158460,160250,163225,167330,171440,173600,175130,178085,180380,182255,185075,188500,191720,195575,197360,201405,204765,206240,208070,210020,212813,215355,217110,219060,222735,225000,227408,229080,232950,235465,237990,239655,241120,243250,245520,247235,248400,252270,255165,260180,262620,264750,267075,268590,270360,276150,277640,279675,281610,283090,284550,287490,289575,291840,297150,300900,305617,309100,313245,315950,319430,321260,324665,326680,330255,333575,334740,338420,340370,343800,345860,350080,352340,354635,356290,357490,359530,362700,364645,367300,370445,372205,374440,380479,382495,385210,386680,391720,394510,396170,399238,402980,405625,408880,411835,416520,419950,424355,427270,427865,428980,431745,435290,437540,440090,442730,445610,447620,451920,455034,456875,459775,465790,468914,471910,473450,475330,479360,480710,482300,485540,488675,492815,494210,496705,499670,503180,504830,507140,512540,515315,519425,525765,528465,532366,535405,539825,542060,544670,546460,548780,550690,553010,555920,558470,560690,562520,564848,569495,571475,573590,577310,581315,585170,586785,588862,591425,593930,597410,598845,600560,603260,604880,608885,612555,615725,618280,621125,625365,627000],"text":["In this video, let's take a closer look at","Azure Cosmos DB's server-side programmability API.","The server-side programmability API","enables you to register a unit of","business logic written in JavaScript to be","executed from directly within the database engine itself.","This API can be used to implement user-defined functions,","stored procedures, and triggers.","The user-defined functions allows you","to extend the SQL query API,","so that you can write a set of","arbitrary Read-Only JavaScript to extend","a select clause or where clause as part of a SQL query.","And the stored procedures and","triggers are your mechanisms for","performing transactions over multiple records and","Cosmos DB within the scope of a partition key.","This is a rather interesting concept","because what we have seen is,","most distributed databases do not give","you transactional semantics over multiple records.","And if you are building applications,","what you found is,","not having multi-records transactions","makes application development rather difficult.","So what Azure Cosmos DB has done is it has","brought back multi-record transactions but a","scope set within a partition key","so that you can avoid some of","the steep trade-offs in terms of","performance that are","associated with distributed transactions.","Now, let's take a look at","an example how this can be leveraged.","And what I have here is a container that holds","records for a game in which I","have multiple game player records.","And what I have here is,","I have a record that is a player whose ID is Ralph,","he is a level 40 warrior,","and he has an inventory of","items in which he has an iron sword.","We have another record that is Heather.","She is a level 40 druid and in her inventory,","she has a diamond pick axe.","And in this scenario,","what Ralph and Heather would like to","do is they would like to trade their items.","They would like to swap their inventories.","Now, in the absence of multi-record transactions,","if I were to read both of these records,","performance swap and persistence back in the database,","if at any time, let's say,","a fault or an exception occurs,","some of the bad things that could potentially happen is,","I might end up duplicating an item or even worse,","I might lose an item.","And so, this is where","stored procedures come in and which I can implement","this unit of business logic in the form of","a stored procedure and","how the stored procedure will work is,","if a stored procedure run successfully to completion,","all of the right operations are going to","be committed in an all-or-none fashion.","And if at any point I want to","fail the transaction or rollback the transaction due to","some data validation issues or some other issues,","what I can do is, I can simply","throw an exception and all of","the right operations from within the script will","be automatically rolled back.","So let's take a look at this script.","What I do here is,","we're going to query for each of","the individual player records which will be passed in","the real input parameter and","then we're going to call a swap function in","which we're going to","perform the swap and persistence back in the database.","Let's take a look at the query function here and","an interesting thing to note here is that,","we actually have two different query APIs","that we can leverage.","We have the SQL query API","that you're probably already familiar with.","We also have a JavaScript language","integrated query so that,","if you want to write fluent JavaScript queries,","you can do so using","a familiar API that looks a lot like es6 array built-ins.","And here what we're doing is,","we have a query that basically","has a filter on a player ID,","so we call filter and we","filter on the player ID and this will be","automatically optimized to run on the Cosmos DB index.","From here, we're going to call that callback","which is this swap items function.","And within the swap items function,","we're going to perform a swap","and then we're going to call","replace document to persist","these records back into the database.","We're going to manage this control flow using","callbacks and at the end of the function,","we're going to set a response body to return what are","the new states of each of the player records.","Now, there's a few things I want to point out in","terms of best practices for writing a stored procedure.","First of all, stored procedures and","all scripts and in Cosmos DB have bounded execution.","There are bounds in terms of","the physical resources a script can consume,","as well as an amount of time","the script must complete execution within.","And this is intended to prevent","malicious activity","because Cosmos DB is a multi-tenant service.","What we do not want to have","happen is someone uploading a malicious script","that affects the performance and causes","noisy neighbor problems for our other tenants.","Now, the nice thing is,","you are well safeguarded against this.","Azure Cosmos DB implements","resource governance throughout","its stack including the servers","our programmability API and","it tightly governs","the execution bounds for each of these scripts.","What this means in terms of writing a script is,","you need to make sure that you honor","these execution bounds or","else if it repeatedly exceeds these bounds,","that script will be blacklisted.","And to ease programmability","in this space, what happens is,","each of the CRUD API methods, what it will do is,","it will return isAccepted return value","and if the value is true,","it means that this operation,","this CRUD operation is expected to complete successfully.","If it returns false, then that means,","you are nearing or rather the script is nearing,","execution bounds and it should","basically wrap up execution and kick out.","And so, you can use this isAccepted boolean from","a CRUD API as a means of running a continuation model.","So if you have a long running transaction,","what you can do is,","you can break it up into","small sub transactions in","which you return the state back to","the caller and use this to","implement continuation so that the caller then","has a signal to make","follow up calls and pass some stateflow information back","in as an input parameter","for another invocation of the script.","Now, because there is an execution around here","both in terms of time","as well as in terms of system resources,","you want to make sure that you avoid","spending these system resources","and paying for overhead that is unnecessary.","And so, one of the things","that you'll want to watch for is,","avoid deserializing inputs if it's not needed.","What I mean by this is,","let's say you have a script that takes","an input document as a string and what you do is,","you call JSON.parse to turn this string into","a object and then you call createDocument on this object.","Because we don't actually do","any operations on this object,","this operation incurs some overhead in","terms of compute without really bringing any value.","And in this case, what you can do is,","you can actually pass the input string directly to","the CRUD API and skip paying this overhead.","Another thing that you'll want to pay attention to is,","once a script hits the execution bounds,","then, it must wrap up execution quickly and terminate.","And anything left on the event loop,","in terms of queued up asynchronous operations,","those may not complete successfully.","So as per standard JavaScript convention,","you'll want to manage the control flow for all of","these asynchronous operations through","the use of callbacks.","And so, for an example","of a pattern that you want to avoid,","let's say we have a input parameter that","passes in an array of records.","What you'll want to avoid doing is queuing up","a large number of createDocument clause","on the event loop in","which you're in a tight loop","calling a bunch of asynchronous CRUD API methods.","Instead of doing this,","the right model is you manage","the control flow such that given this array,","you call createDocument and then in the callback,","you process the next document and create that.","And this allows you to now build","a continuation model so that,","if let's say you want to create a million documents,","and within this script invocation,","we can persist the first 10,000.","When isAccepted is false,","what you can do is,","you can pass back to the caller saying, \"Hey,","the first 10,000 have been","persisted so upon next invocation,","start at item 10,001.\"","And this is how you can build a continuation model","on top of these stored procedures.","This concludes a quick rundown of","the Cosmos DB server-side programmability API.","Thank you for watching."]}