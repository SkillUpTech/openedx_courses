{"start":[150,2600,4190,6320,8195,12305,14155,16850,18875,20780,23075,25340,27410,29720,33215,35770,38120,39645,41330,43185,45380,47578,48975,51860,54935,58100,61790,63510,67780,70420,72040,74290,76931,80340,82110,85095,86670,88020,89550,93850,95700,97020,99680,101520,106830,109440,113235,116115,117895,119580,122535,124050,125880,130110,132270,134720,137130,139860,142380,145430,146850,148365,149955,153460,154470,157150,158895,160800,163320,168275,172015,176770,178885,181600,183760,185200,187630,190620,193780,195730,198355,201696,207430,210550,214560,219120,221790,225465,228390,232733,234915,238065,240160,243105,245130,247275,248430,249925,252600,255090,256500,258600,261060,264544,265680,267150,270394,272600,275400,277770,280655,284045,288750,292955,298080,300985,305275,307725,310820,315610,318550,323580,326815,327990,331140,333750,336845,339450,343500,347940,353120,355370,360140,363670,366780,368280,371395,374960,379750,381320,384920,386930,389265,393700,394910,397835,400655,405571,407985,409520,412520,416960,421720,424500,427595,432050,433070,434480,436370,441417,444540,448275,452160,455160,457230,460130,462450,466660,468567,472260,476439,478070,480085,481640,483345,484805,487445,489830,493390,495200,498760,501200,506080],"end":[2600,4190,6320,8195,12305,14155,16850,18875,20780,23075,25340,27410,29720,33215,35770,38120,39645,41330,43185,45380,47578,48975,51860,54935,58100,61790,63510,67780,70420,72040,74290,76931,80340,82110,85095,86670,88020,89550,93850,95700,97020,99680,101520,106830,109440,113235,116115,117895,119580,122535,124050,125880,130110,132270,134720,137130,139860,142380,145430,146850,148365,149955,153460,154470,157150,158895,160800,163320,168275,172015,176770,178885,181600,183760,185200,187630,190620,193780,195730,198355,201696,207430,210550,214560,219120,221790,225465,228390,232733,234915,238065,240160,243105,245130,247275,248430,249925,252600,255090,256500,258600,261060,264544,265680,267150,270394,272600,275400,277770,280655,284045,288750,292955,298080,300985,305275,307725,310820,315610,318550,323580,326815,327990,331140,333750,336845,339450,343500,347940,353120,355370,360140,363670,366780,368280,371395,374960,379750,381320,384920,386930,389265,393700,394910,397835,400655,405571,407985,409520,412520,416960,421720,424500,427595,432050,433070,434480,436370,441417,444540,448275,452160,455160,457230,460130,462450,466660,468567,472260,476439,478070,480085,481640,483345,484805,487445,489830,493390,495200,498760,501200,506080,510000],"text":["In this video, let's take a look at","Azure Cosmos DB's automatic","indexing capabilities as well as take","a look at how you can tune and configure","the index policy on your Azure Cosmo DB container.","This is a really cool capability because","Azure Cosmos DB gives you the unique ability to","automatically index every property of","every record without having","to find schema or index upfront.","This means Cosmos DB can free you","from the pains of having to deal with schema","and index management so that if you're","building mission critical or global scale applications,","you don't have to deal with the pains","of how do you deal with create index,","dropped index, auto-tables","while maintaining availability.","There's none of these pains.","The automatic indexing capability","works across every data model,","and the index itself is built as","a latch free data structure that is optimized","to run on a highly write-optimized database engine","so that you can automatically index while","simultaneously sustaining a heavy write injection","of records coming in.","Cosmos DB supports multiple different index types that's","optimized around different workflows","so you can have hash indexes,","range indexes as well as geospatial indexes","for geospatial query support.","Let's take a look at an example set of records","to give you an idea of how","to visualize the index behind the scenes.","And, for this example,","what we have here is","two JSON documents that we're going to","store in Cosmos DB.","Now, to help you build a mental model,","what we'll do is we're going to build","a tree representation of each of these documents,","in which we're going to have a root node.","You can think of this as the root document.","The idea of the document and each of","its child nodes is going to be one level deep,","the properties underneath that root document.","And because, in JSON,","we can have nested arrays,","nested objects, which support complex data types,","each of its child nodes from","here are going to be traversing","deeper and deeper into this record.","The leaf nodes are going to","be the instance values of that record.","What's interesting is if we turn","each of these records into a tree representation,","we can merge these trees into","an inverted index and so that way,","on an inverted index,","what we can do is we can say,","\"Hey, if we want to run a query,","or we take a look at select star from this container,","finally all the records","whose locations, country is Germany.","If I traverse this tree,","I can find that, hey,","records one and two have country as","Germany and record one has a city that is Berlin.\"","And one of the other interesting characteristics","of building an inverted index in this manner is not only","can you automatically index","every property of every record","and support this over","a heterogeneous set of","properties on each of these different records,","meaning each of the records can have differing schema.","But because the vast majority","of your records are going to have a lot of","commonalities in terms of","different paths within the structure,","this allows you to basically compress and dedupe a lot of","this information and efficiently build","this index without having to use up a lot of storage.","Now, while you can rely on","the automatic indexing capabilities of","Cosmos DB and not have to turn the index policy,","at the end of the day, if you really want to get","every last bit of performance out of your Cosmos DB,","we do expose a lot of","knobs and levers for you to tune Cosmos DB.","We really have built this as","a database for the database geek.","Now, let's take a look at some","of the options and the index policy available,","and the way you're going to","navigate to get to this is you're","going to open up the Azure portal,","you're going to navigate to your Cosmos DB account.","If you go to settings and go to","the index policy or alternatively,","go to the data explorer and also","similarly navigate to the index policy for a container.","What you're going to see is an","index policy that looks very","much like the one we have in front of us.","Cosmos DB supports","multiple indexing modes and by default,","it uses consistent indexing.","What that means is that as records come in,","all of the indexes are synchronously indexed","and immediately made available for follow up queries.","Now, if you want to amortize the cost of indexing","over time and basically materialize these indexes,","there's also another indexing mode called Lazy,","in which as records are written into Cosmos DB,","rather than synchronously generating","the index for that record,","what it will do is it will build the index as","a background task lazily behind the scenes","using leftover request units on your container.","On this index policy,","we also have a set of","included paths as well as excluded paths.","And by default, what Cosmos DB will","do is it will index the path /*.","What that means is it will index every property of","every record and if it's a complex object or array,","it'll also recursively look deep inside those objects and","arrays all the way until it finds the instance values.","Now, depending on what that value is,","if it's a numeric string or GeoJSON point,","it can build a variety of different kind of indexes.","And for most general cases,","what we do is we recommend","a range index for numerics and strings,","but we also support a hash kind of","index for doing efficient and quality operations.","The range index gives you","a bit more flexibility in what she can perform.","Range operators, basically,","the index will preserve values so you can do less than,","greater than, order by ,and these kind of operators.","The other thing you can tune is","the precision of the index,","and this will be the number of bytes","that will be preserved for that index term.","Now, for most workloads,","what we do is we advocate","or prescribe a precision of minus one.","What minus one will do is it'll dynamically","size the index entry based off of the size of the value.","If you have a value that is only three bytes,","rather than having to hash or","truncate the index entry to a set number of bytes,","let's say 100 bytes,","what it'll do is it'll dynamically","size that entry based off","of how many bytes are in the actual instance value.","Now, an interesting thing here is we","can not only include a set of paths in this array,","where we can strictly define what paths we want to index,","we can actually automatically index everything and","then blacklist or exclude","a set of paths that we know we don't want to index.","And basically, the more","specific the path is, it'll override less specific paths.","The way you can do it is you can say,","index everything except this particular path in","my record so this","gives you a pretty good glimpse","on how you can tune the index policy.","The thing that you're going to really want to","pay attention to most is","the indexing mode as well","as what paths you want to include.","From there, you can also","tune the kind as well as the precision of the index.","These are going to be a little bit more of","micro optimizations on the index policy.","The thing that you want to pay attention to most is","the indexing mode as well as the excluded paths.","Thank you for watching our video on indexing."]}